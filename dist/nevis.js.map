{"version":3,"file":"nevis.js","sources":["../src/extend.js","../src/equals/comparators/comparator.js","../src/equals/comparators/collection-comparator.js","../src/equals/comparators/array-comparator.js","../src/equals/comparators/hash-comparator.js","../src/equals/comparators/number-comparator.js","../src/equals/comparators/object-comparator.js","../src/equals/comparators/string-comparator.js","../src/equals/comparators/to-string-comparator.js","../src/equals/comparators/value-of-comparator.js","../src/equals/comparators/index.js","../src/equals/context.js","../src/equals/index.js","../src/equals/builder.js","../src/hash-code/generators/generator.js","../src/hash-code/generators/collection-generator.js","../src/hash-code/generators/array-generator.js","../src/hash-code/generators/boolean-generator.js","../src/hash-code/generators/caching-generator.js","../src/hash-code/generators/hash-generator.js","../src/hash-code/generators/number-generator.js","../src/hash-code/generators/object-generator.js","../src/hash-code/generators/string-generator.js","../src/hash-code/generators/to-string-generator.js","../src/hash-code/generators/value-of-generator.js","../src/hash-code/generators/index.js","../src/hash-code/context.js","../src/hash-code/index.js","../src/hash-code/builder.js","../src/nevis.js","../src/to-string/index.js","../src/index.js"],"sourcesContent":["/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\n/**\n * A bare-bones constructor for surrogate prototype swapping.\n *\n * @private\n * @constructor\n */\nvar Constructor = /* istanbul ignore next */ function() {}\n/**\n * A reference to <code>Object.prototype.hasOwnProperty</code>.\n *\n * @private\n * @type {Function}\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n/**\n * A reference to <code>Array.prototype.slice</code>.\n *\n * @private\n * @type {Function}\n */\nvar slice = Array.prototype.slice\n\n/**\n * Creates an object which inherits the given <code>prototype</code>.\n *\n * Optionally, the created object can be extended further with the specified <code>properties</code>.\n *\n * @param {Object} prototype - the prototype to be inherited by the created object\n * @param {Object} [properties] - the optional properties to be extended by the created object\n * @return {Object} The newly created object.\n * @private\n */\nfunction createObject(prototype, properties) {\n  var result\n  /* istanbul ignore else */\n  if (typeof Object.create === 'function') {\n    result = Object.create(prototype)\n  } else {\n    Constructor.prototype = prototype\n    result = new Constructor()\n    Constructor.prototype = null\n  }\n\n  if (properties) {\n    extendObject(true, result, properties)\n  }\n\n  return result\n}\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special\n * <code>class_</code> property on the child constructor, otherwise the class name of the super constructor will be used\n * instead. The class name may also be used string representation for instances of the child constructor (via\n * <code>toString</code>), but this is not applicable to the <i>lite</i> version of Nevis.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {string} [name=this.class_] - the class name to be used for the child constructor\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n */\nfunction extend(name, constructor, prototype, statics) {\n  var superConstructor = this\n\n  if (typeof name !== 'string') {\n    statics = prototype\n    prototype = constructor\n    constructor = name\n    name = null\n  }\n\n  if (typeof constructor !== 'function') {\n    statics = prototype\n    prototype = constructor\n    constructor = function() {\n      return superConstructor.apply(this, arguments)\n    }\n  }\n\n  extendObject(false, constructor, superConstructor, statics)\n\n  constructor.prototype = createObject(superConstructor.prototype, prototype)\n  constructor.prototype.constructor = constructor\n\n  constructor.class_ = name || superConstructor.class_\n  constructor.super_ = superConstructor\n\n  return constructor\n}\n\n/**\n * Extends the specified <code>target</code> object with the properties in each of the <code>sources</code> provided.\n *\n * if any source is <code>null</code> it will be ignored.\n *\n * @param {boolean} own - <code>true</code> to only copy <b>own</b> properties from <code>sources</code> onto\n * <code>target</code>; otherwise <code>false</code>\n * @param {Object} target - the target object which should be extended\n * @param {...Object} [sources] - the source objects whose properties are to be copied onto <code>target</code>\n * @return {void}\n * @private\n */\nfunction extendObject(own, target, sources) {\n  sources = slice.call(arguments, 2)\n\n  var property\n  var source\n\n  for (var i = 0, length = sources.length; i < length; i++) {\n    source = sources[i]\n\n    for (property in source) {\n      if (!own || hasOwnProperty.call(source, property)) {\n        target[property] = source[property]\n      }\n    }\n  }\n}\n\nmodule.exports = extend\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar extend = require('../../extend')\n\n/**\n * Responsible for comparing the values within a specific {@link EqualsContext} to check whether they are equal.\n *\n * Individual <code>EqualsComparator</code> implementations should attempt to concentrate on specific value types to\n * keep them small and targeted, allowing other implementations to possibly provide a more suitable comparison. The\n * {@link EqualsContext} should <b>never</b> be modified but can be copied via {@link EqualsContext#copy}.\n *\n * A <code>EqualsComparator</code> is <b>only</b> called once it has been determined that the values within the\n * {@link EqualsContext} are not exactly equal, neither are <code>null</code>, and both share the same type.\n *\n * Implementations <b>must</b> implement the {@link EqualsComparator#compare} and {@link EqualsComparator#supports}\n * methods.\n *\n * @protected\n * @constructor\n */\nfunction EqualsComparator() {}\nEqualsComparator.class_ = 'EqualsComparator'\nEqualsComparator.super_ = Object\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special\n * <code>class_</code> property on the child constructor, otherwise \"Nevis\" will be used instead. The class name may\n * also be used string representation for instances of the child constructor (via <code>toString</code>), but this is\n * not applicable to the <i>lite</i> version of Nevis.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {string} [name=\"Nevis\"] - the class name to be used for the child constructor\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n * @static\n * @memberof EqualsComparator\n */\nEqualsComparator.extend = extend\n\n/**\n * Compares the values within the specified <code>context</code>.\n *\n * This method is only called when {@link EqualsComparator#supports} indicates that this {@link EqualsComparator}\n * supports <code>context</code>.\n *\n * @param {EqualsContext} context - the {@link EqualsContext} whose values are to be compared\n * @return {boolean} <code>true</code> if the values within <code>context</code> are equal; otherwise\n * <code>false</code>.\n * @public\n * @abstract\n * @memberof EqualsComparator#\n */\nEqualsComparator.prototype.compare = /* istanbul ignore next */ function compare(context) {}\n\n/**\n * Returns whether this {@link EqualsComparator} supports the specified <code>context</code>.\n *\n * This method should only return <code>true</code> when {@link EqualsComparator#compare} can compare the values within\n * <code>context</code>.\n *\n * @param {EqualsContext} context - the {@link EqualsContext} to be checked\n * @return {boolean} <code>true</code> if this {@link EqualsComparator} can compare the values within\n * <code>context</code>; otherwise <code>false</code>.\n * @public\n * @abstract\n * @memberof EqualsComparator#\n */\nEqualsComparator.prototype.supports = /* istanbul ignore next */ function supports(context) {}\n\nmodule.exports = EqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar EqualsComparator = require('./comparator')\n\n/**\n * An abstract implementation of {@link EqualsComparator} that is intended for implementations that wish to support\n * values types that contain a collection of other values. This is achieved by requesting the elements contained within\n * e value as an array from the implementation and then compares each element to determine whether the values are equal.\n *\n * Implementations <b>must</b> implement the {@link CollectionEqualsComparator#getElements} and\n * {@link EqualsComparator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends EqualsComparator\n */\nvar CollectionEqualsComparator = EqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof CollectionEqualsComparator#\n   */\n  compare: function compare(context) {\n    var elements = this.getElements(context.value, context)\n    var otherElements = this.getElements(context.other, context)\n    var length = elements.length\n\n    if (length !== otherElements.length) {\n      return false\n    }\n\n    while (length--) {\n      if (!context.equals(elements[length], otherElements[length])) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Returns the elements contained within the specified <code>collection</code>.\n   *\n   * @param {*} collection - the collection whose elements are to be returned\n   * @param {EqualsContext} context - the current {@link EqualsContext}\n   * @return {Array} The elements contained within <code>collection</code>.\n   * @protected\n   * @abstract\n   * @memberof CollectionEqualsComparator#\n   */\n  getElements: /* istanbul ignore next */ function getElements(collection, context) {}\n\n})\n\nmodule.exports = CollectionEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar CollectionEqualsComparator = require('./collection-comparator')\n\n/**\n * An implementation of {@link CollectionEqualsComparator} that supports array values.\n *\n * @protected\n * @constructor\n * @extends CollectionEqualsComparator\n */\nvar ArrayEqualsComparator = CollectionEqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ArrayEqualsComparator#\n   */\n  getElements: function getElements(collection) {\n    return collection\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ArrayEqualsComparator#\n   */\n  supports: function supports(context) {\n    return context.string === '[object Array]'\n  }\n\n})\n\nmodule.exports = ArrayEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar EqualsComparator = require('./comparator')\n\n/**\n * An abstract implementation of {@link EqualsComparator} that is intended for implementations that wish to support\n * value types that represent a hash of key/value pairs. This is achieved by requesting the keys contained within each\n * value as an array from the implementation and then compares each key/value pair to determine whether the values are\n * equal.\n *\n * Implementations <b>must</b> implement the {@link HashEqualsComparator#getKeys}, {@link HashEqualsComparator#getValue}\n * and {@link EqualsComparator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends EqualsComparator\n */\nvar HashEqualsComparator = EqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof HashEqualsComparator#\n   */\n  compare: function compare(context) {\n    var value = context.value\n    var other = context.other\n    var keys = this.getKeys(value, context)\n    var length = keys.length\n\n    if (length !== this.getKeys(other, context).length) {\n      return false\n    }\n\n    var key\n\n    while (length--) {\n      key = keys[length]\n\n      if (!context.equals(this.getValue(value, key, context), this.getValue(other, key, context))) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Returns the keys contained within the value of the specified <code>hash</code>.\n   *\n   * @param {*} hash - the hash whose keys are to be returned\n   * @param {EqualsContext} context - the current {@link EqualsContext}\n   * @return {Array} The keys contained within <code>hash</code>.\n   * @protected\n   * @abstract\n   * @memberof HashEqualsComparator#\n   */\n  getKeys: /* istanbul ignore next */ function getKeys(hash, context) {},\n\n  /**\n   * Returns the value associated with the specified <code>key</code> in the <code>hash</code> provided.\n   *\n   * @param {*} hash - the hash from which the value is to be returned\n   * @param {*} key - the key for which the associated value is to be returned\n   * @param {EqualsContext} context - the current {@link EqualsContext}\n   * @return {*} The value for <code>key</code> within <code>hash</code>.\n   * @protected\n   * @abstract\n   * @memberof HashEqualsComparator#\n   */\n  getValue: /* istanbul ignore next */ function getValue(hash, key, context) {}\n\n})\n\nmodule.exports = HashEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar EqualsComparator = require('./comparator')\n\n/**\n * An implementation of {@link EqualsComparator} that supports number values (including <code>NaN</code>).\n *\n * @protected\n * @constructor\n * @extends EqualsComparator\n */\nvar NumberEqualsComparator = EqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof NumberEqualsComparator#\n   */\n  compare: function compare(context) {\n    return context.value !== context.value ? context.other !== context.other : context.value === context.other\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof NumberEqualsComparator#\n   */\n  supports: function supports(context) {\n    return context.type === 'number'\n  }\n\n})\n\nmodule.exports = NumberEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashEqualsComparator = require('./hash-comparator')\n\n/**\n * An implementation of {@link HashEqualsComparator} that supports plain old object values.\n *\n * @protected\n * @constructor\n * @extends HashEqualsComparator\n */\nvar ObjectEqualsComparator = HashEqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ObjectEqualsComparator#\n   */\n  getKeys: function getKeys(hash, context) {\n    var keys = []\n    var options = context.options\n    var value\n\n    for (var key in hash) {\n      if (!options.skipInherited || Object.prototype.hasOwnProperty.call(hash, key)) {\n        value = this.getValue(hash, key, context)\n\n        if ((typeof value !== 'function' || !options.skipMethods) && options.filterProperty(key, value, hash)) {\n          keys.push(key)\n        }\n      }\n    }\n\n    return keys\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ObjectEqualsComparator#\n   */\n  getValue: function getValue(hash, key) {\n    return hash[key]\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ObjectEqualsComparator#\n   */\n  supports: function supports(context) {\n    return context.type === 'object'\n  }\n\n})\n\nmodule.exports = ObjectEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar EqualsComparator = require('./comparator')\n\n/**\n * An implementation of {@link EqualsComparator} that supports string values.\n *\n * @protected\n * @constructor\n * @extends EqualsComparator\n */\nvar StringEqualsComparator = EqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof StringEqualsComparator#\n   */\n  compare: function compare(context) {\n    var other = context.other\n    var value = context.value\n\n    if (context.options.ignoreCase) {\n      other = other.toLocaleUpperCase()\n      value = value.toLocaleUpperCase()\n    }\n\n    return value === other\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof StringEqualsComparator#\n   */\n  supports: function supports(context) {\n    return context.type === 'string'\n  }\n\n})\n\nmodule.exports = StringEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar EqualsComparator = require('./comparator')\n\n/**\n * An implementation of {@link EqualsComparator} that supports miscellaneous values by comparing their string\n * representations (generated by calling <code>toString</code> on each value).\n *\n * This {@link EqualsComparator} currently only supports functions and regular expressions.\n *\n * @protected\n * @constructor\n * @extends EqualsComparator\n */\nvar ToStringEqualsComparator = EqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ToStringEqualsComparator#\n   */\n  compare: function compare(context) {\n    return context.value.toString() === context.other.toString()\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ToStringEqualsComparator#\n   */\n  supports: function supports(context) {\n    return context.type === 'function' || context.string === '[object RegExp]'\n  }\n\n})\n\nmodule.exports = ToStringEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar EqualsComparator = require('./comparator')\n\n/**\n * An implementation of {@link EqualsComparator} that supports miscellaneous values by comparing their primitive value\n * (determined by calling <code>valueOf</code> on each value).\n *\n * This {@link EqualsComparator} currently only supports dates.\n *\n * @protected\n * @constructor\n * @extends EqualsComparator\n */\nvar ValueOfEqualsComparator = EqualsComparator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ValueOfEqualsComparator#\n   */\n  compare: function compare(context) {\n    return context.equals(context.value.valueOf(), context.other.valueOf())\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ValueOfEqualsComparator#\n   */\n  supports: function supports(context) {\n    return context.string === '[object Date]'\n  }\n\n})\n\nmodule.exports = ValueOfEqualsComparator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar ArrayEqualsComparator = require('./array-comparator')\nvar CollectionEqualsComparator = require('./collection-comparator')\nvar EqualsComparator = require('./comparator')\nvar HashEqualsComparator = require('./hash-comparator')\nvar NumberEqualsComparator = require('./number-comparator')\nvar ObjectEqualsComparator = require('./object-comparator')\nvar StringEqualsComparator = require('./string-comparator')\nvar ToStringEqualsComparator = require('./to-string-comparator')\nvar ValueOfEqualsComparator = require('./value-of-comparator')\n\n/**\n * A hash containing constructors for all equals comparators.\n *\n * @public\n * @type {Object.<string, Function>}\n */\nmodule.exports = {\n  ArrayEqualsComparator: ArrayEqualsComparator,\n  CollectionEqualsComparator: CollectionEqualsComparator,\n  EqualsComparator: EqualsComparator,\n  HashEqualsComparator: HashEqualsComparator,\n  NumberEqualsComparator: NumberEqualsComparator,\n  ObjectEqualsComparator: ObjectEqualsComparator,\n  StringEqualsComparator: StringEqualsComparator,\n  ToStringEqualsComparator: ToStringEqualsComparator,\n  ValueOfEqualsComparator: ValueOfEqualsComparator\n}\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\n/**\n * Contains the values whose equality is to be tested as well as the string representation and type for the value which\n * can be checked elsewhere for type-checking etc.\n *\n * A <code>EqualsContext</code> is <b>only</b> created once it has been determined that both values not exactly equal\n * and neither are <code>null</code>. Once instantiated, {@link EqualsContext#validate} should be called to ensure that\n * both values share the same type.\n *\n * @param {*} value - the value to be checked against <code>other</code>\n * @param {*} other - the other value to be checked against <code>value</code>\n * @param {Function} equals - a reference to {@link Nevis.equals} which can be called within an {@link EqualsComparator}\n * @param {?Nevis~EqualsOptions} options - the options to be used (may be <code>null</code>)\n * @public\n * @constructor\n */\nfunction EqualsContext(value, other, equals, options) {\n  if (options == null) {\n    options = {}\n  }\n\n  /**\n   * A reference to {@link Nevis.equals} which can be called within an {@link EqualsComparator}.\n   *\n   * @private\n   * @type {Function}\n   */\n  this._equals = equals\n\n  /**\n   * The options to be used to test equality for both of the values.\n   *\n   * @public\n   * @type {Nevis~EqualsOptions}\n   */\n  this.options = {\n    filterProperty: options.filterProperty != null ? options.filterProperty : function() {\n      return true\n    },\n    ignoreCase: Boolean(options.ignoreCase),\n    skipInherited: Boolean(options.skipInherited),\n    skipMethods: Boolean(options.skipMethods),\n    useEqualsMethod: options.useEqualsMethod !== false\n  }\n\n  /**\n   * The other value to be checked against the <code>value</code>.\n   *\n   * @public\n   * @type {*}\n   */\n  this.other = other\n\n  /**\n   * The string representation of the values to be tested for equality.\n   *\n   * This is generated using <code>Object.prototype.toString</code> and is intended to be primarily used for more\n   * specific type-checking.\n   *\n   * @public\n   * @type {string}\n   */\n  this.string = Object.prototype.toString.call(value)\n\n  /**\n   * The type of the values to be tested for equality.\n   *\n   * This is generated using <code>typeof</code> and is intended to be primarily used for simple type-checking.\n   *\n   * @public\n   * @type {string}\n   */\n  this.type = typeof value\n\n  /**\n   * The value to be checked against the <code>other</code>.\n   *\n   * @public\n   * @type {*}\n   */\n  this.value = value\n}\n\n/**\n * Creates a copy of this {@link EqualsContext} but for the specified <code>value</code> and <code>other</code> value\n * instead.\n *\n * This method can be useful for when an {@link EqualsComparator} implementation wants to test equality based on a value\n * derived from the original value (e.g. a string representation) and then passing it to a super class.\n *\n * @param {*} value - the value to be checked against <code>other</code>\n * @param {*} other - the other value to be checked against <code>value</code>\n * @return {EqualsContext} A copy of this {@link EqualsContext} for <code>value</code> and <code>other</code>.\n * @public\n * @memberof EqualsContext#\n */\nEqualsContext.prototype.copy = function copy(value, other) {\n  return new EqualsContext(value, other, this._equals, this.options)\n}\n\n/**\n * A convenient shorthand for calling {@link Nevis.equals} from within an {@link EqualsComparator}.\n *\n * @param {*} value - the value to be checked against <code>other</code> (may be <code>null</code>)\n * @param {Function} [value.equals] - the method to be used to test equality for <code>value</code> and\n * <code>other</code>, when present\n * @param {*} other - the other value to be checked against <code>value</code> (may be <code>null</code>)\n * @return {boolean} <code>true</code> if <code>value</code> is equal to <code>other</code>; otherwise\n * <code>false</code>.\n * @public\n * @memberof EqualsContext#\n */\nEqualsContext.prototype.equals = function equals(value, other) {\n  return this._equals(value, other, this.options)\n}\n\n/**\n * Validates this {@link EqualsContext} by checking whether its values share the same type.\n *\n * This method <b>must</b> be called before attempting to call any {@link EqualsComparator} as they are meant to be able\n * to assume that both values share the same type.\n *\n * @return {boolean} <code>true</code> if both values share the same type; otherwise <code>false</code>.\n * @public\n * @memberof EqualsContext#\n */\nEqualsContext.prototype.validate = function validate() {\n  return this.string === Object.prototype.toString.call(this.other) && this.type === typeof this.other\n}\n\nmodule.exports = EqualsContext\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar comparators = require('./comparators')\nvar EqualsContext = require('./context')\n\n/**\n * The list of active equals comparators that will be checked for any that support the values.\n *\n * @private\n * @type {EqualsComparator[]}\n */\nvar activeComparators = [\n  new comparators.NumberEqualsComparator(),\n  new comparators.StringEqualsComparator(),\n  new comparators.ToStringEqualsComparator(),\n  new comparators.ValueOfEqualsComparator(),\n  new comparators.ArrayEqualsComparator(),\n  new comparators.ObjectEqualsComparator()\n]\n\n/**\n * Returns whether the specified <code>value</code> is \"equal to\" the <code>other</code> provided using the given\n * <code>options</code>.\n *\n * Consequently, if both arguments are <code>null</code>, <code>true</code> is returned and if exactly one argument is\n * <code>null</code>, <code>false</code> is returned. Otherwise, this method implements an equivalence relation on\n * non-null object references:\n *\n * <ul>\n *   <li>It is <i>reflexive</i>: for any non-null reference value <code>x</code>, <code>equals(x, x)</code> should\n *   return <code>true</code>.</li>\n *   <li>It is <i>symmetric</i>: for any non-null reference values <code>x</code> and <code>y</code>,\n *   <code>equals(x, y)</code> should return <code>true</code> if and only if <code>equals(y, x)</code> returns\n *   <code>true</code>.</li>\n *   <li>It is <i>transitive</i>: for any non-null reference values <code>x</code>, <code>y</code>, and <code>z</code>,\n *   if <code>equals(x, y)</code> returns <code>true</code> and <code>equals(y, z)</code> returns <code>true</code>,\n *   then <code>equals(x, z)</code> should return <code>true</code>.</li>\n *   <li>It is <i>consistent</i>: for any non-null reference values <code>x</code> and <code>y</code>, multiple\n *   invocations of <code>equals(x, y)</code> consistently return <code>true</code> or consistently return\n *   <code>false</code>, provided no information used in <code>equals</code> comparisons on the objects is\n *   modified.</li>\n *   <li>For any non-null reference value <code>x</code>, <code>equals(x, null)</code> should return\n *   <code>false</code>.</li>\n * </ul>\n *\n * If neither value is <code>null</code> and both are not exactly (strictly) equal, this method will first check whether\n * <code>value</code> has a method named \"equals\" and, if so, return the result of calling that method with\n * <code>other</code> passed to it. If no \"equals\" method exists on <code>value</code> or if the\n * <code>useEqualsMethod</code> option is disabled, it will attempt to test the equality internally based on their type.\n *\n * Plain objects are tested recursively for their properties and collections (e.g. arrays) are also tested recursively\n * for their elements.\n *\n * @param {*} value - the value to be checked against <code>other</code> (may be <code>null</code>)\n * @param {Function} [value.equals] - the method to be used to test equality for <code>value</code> and\n * <code>other</code>, when present\n * @param {*} other - the other value to be checked against <code>value</code> (may be <code>null</code>)\n * @param {Nevis~EqualsOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {boolean} <code>true</code> if <code>value</code> is equal to <code>other</code>; otherwise\n * <code>false</code>.\n * @public\n */\nfunction equals(value, other, options) {\n  if (value === other) {\n    return true\n  }\n  if (value == null || other == null) {\n    return value === other\n  }\n\n  var context = new EqualsContext(value, other, equals, options)\n\n  if (context.options.useEqualsMethod && typeof value.equals === 'function') {\n    return value.equals(other)\n  }\n\n  if (!context.validate()) {\n    return false\n  }\n\n  var comparator\n  var length = activeComparators.length\n\n  for (var i = 0; i < length; i++) {\n    comparator = activeComparators[i]\n\n    if (comparator.supports(context)) {\n      return comparator.compare(context)\n    }\n  }\n\n  return false\n}\n\nmodule.exports = equals\n\n/**\n * Called with the name and value of a property belonging to an object whose equality is being tested to determine\n * whether the property should be checked against that on the other object within the equality test.\n *\n * Keep in mind that including a property on one object but not on the other will almost certainly result in\n * inequality.\n *\n * @callback Nevis~EqualsFilterPropertyCallback\n * @param {string} name - the name of the property being checked\n * @param {*} value - the value of the property being checked\n * @param {Object} obj - the object to which the property belongs and that is being checked against another\n * @return {boolean} <code>true</code> if the equality of the property should be tested against that on the other\n * object; otherwise <code>false</code>.\n */\n\n/**\n * The options to be used to test equality.\n *\n * @typedef {Object} Nevis~EqualsOptions\n * @property {Nevis~EqualsFilterPropertyCallback} [filterProperty] - A function to be called to filter properties based\n * on their name and value when testing equality of objects to determine whether they should be tested. This is not\n * called for method properties when <code>skipMethods</code> is enabled.\n * @property {boolean} [ignoreCase] - <code>true</code> to ignore case when testing equality for strings; otherwise\n * <code>false</code>.\n * @property {boolean} [skipInherited] - <code>true</code> to skip inherited properties when testing equality for\n * objects; otherwise <code>false</code>.\n * @property {boolean} [skipMethods] - <code>true</code> to skip method properties when testing equality for objects;\n * otherwise <code>false</code>.\n * @property {boolean} [useEqualsMethod=true] - <code>true</code> to return the result of calling the \"equals\" method on\n * value, when present; otherwise <code>false</code>.\n */\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar staticEquals = require('./')\n\n/**\n * Assists in building good equals for complex classes.\n *\n * @public\n * @constructor\n */\nfunction EqualsBuilder() {\n  /**\n   * The current equals for this {@link EqualsBuilder}.\n   *\n   * @private\n   * @type {boolean}\n   */\n  this._equals = true\n}\n\n/**\n * Appends the specified <code>value</code> and <code>other</code> to this {@link EqualsBuilder}, testing equality for\n * them using the <code>options</code> provided.\n *\n * @param {*} value - the value to be checked against <code>other</code> (may be <code>null</code>)\n * @param {Function} [value.equals] - the method to be used to check equality for <code>value</code> and\n * <code>other</code>, when present\n * @param {*} other - the other value to be checked against <code>value</code> (may be <code>null</code>)\n * @param {Nevis~EqualsOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {EqualsBuilder} A reference to this {@link EqualsBuilder} for chaining purposes.\n * @public\n * @memberof EqualsBuilder#\n */\nEqualsBuilder.prototype.append = function append(value, other, options) {\n  if (this._equals) {\n    this._equals = staticEquals(value, other, options)\n  }\n\n  return this\n}\n\n/**\n * Appends the result of testing equality for a super class to this {@link EqualsBuilder}.\n *\n * @param {boolean} superEquals - the result of testing equality for a super class\n * @return {EqualsBuilder} A reference to this {@link EqualsBuilder} for chaining purposes.\n * @public\n * @memberof EqualsBuilder#\n */\nEqualsBuilder.prototype.appendSuper = function appendSuper(superEquals) {\n  if (this._equals) {\n    this._equals = superEquals\n  }\n\n  return this\n}\n\n/**\n * Returns whether the values that have been appended to this {@link EqualsBuilder} are all equal.\n *\n * @return {boolean} <code>true</code> if all appended values are equal; otherwise <code>false</code>.\n * @public\n * @memberof EqualsBuilder#\n */\nEqualsBuilder.prototype.build = function build() {\n  return this._equals\n}\n\nmodule.exports = EqualsBuilder\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar extend = require('../../extend')\n\n/**\n * Responsible for generating a hash code for a specific {@link HashCodeContext}.\n *\n * Individual <code>HashCodeGenerator</code> implementations should attempt to concentrate on specific value types to\n * keep them small and targeted, allowing other implementations to possibly generate a more suitable hash code. The\n * {@link HashCodeContext} should <b>never</b> be modified but can be copied via {@link HashCodeContext#copy}.\n *\n * Implementations <b>must</b> implement the {@link HashCodeGenerator#generate} and {@link HashCodeGenerator#supports}\n * methods.\n *\n * @protected\n * @constructor\n */\nfunction HashCodeGenerator() {}\nHashCodeGenerator.class_ = 'HashCodeGenerator'\nHashCodeGenerator.super_ = Object\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special\n * <code>class_</code> property on the child constructor, otherwise \"Nevis\" will be used instead. The class name may\n * also be used string representation for instances of the child constructor (via <code>toString</code>), but this is\n * not applicable to the <i>lite</i> version of Nevis.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {string} [name=\"Nevis\"] - the class name to be used for the child constructor\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n * @static\n * @memberof HashCodeGenerator\n */\nHashCodeGenerator.extend = extend\n\n/**\n * Returns a hash code for the specified <code>context</code>.\n *\n * This method is only called when {@link HashCodeGenerator#supports} indicates that this {@link HashCodeGenerator}\n * supports <code>context</code>.\n *\n * @param {HashCodeContext} context - the {@link HashCodeContext} for which the hash code is to be generated\n * @return {number} The hash code generated for <code>context</code>.\n * @public\n * @abstract\n * @memberof HashCodeGenerator#\n */\nHashCodeGenerator.prototype.generate = /* istanbul ignore next */ function generate(context) {}\n\n/**\n * Returns whether this {@link HashCodeGenerator} supports the specified <code>context</code>.\n *\n * This method should only return <code>true</code> when {@link HashCodeGenerator#generate} can generate a hash code for\n * <code>context</code>.\n *\n * @param {HashCodeContext} context - the {@link HashCodeContext} to be checked\n * @return {boolean} <code>true</code> if this {@link HashCodeGenerator} can generate a hash code for\n * <code>context</code>; otherwise <code>false</code>.\n * @public\n * @abstract\n * @memberof HashCodeGenerator#\n */\nHashCodeGenerator.prototype.supports = /* istanbul ignore next */ function supports(context) {}\n\nmodule.exports = HashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An abstract implementation of {@link HashCodeGenerator} that is intended for implementations that wish to support\n * value types that contain a collection of other values. This is achieved by requesting the elements contained within\n * the value as an array from the implementation and then generates hash codes for each element to compute the hash code\n * for the value.\n *\n * Implementations <b>must</b> implement the {@link CollectionHashCodeGenerator#getElements} and\n * {@link HashCodeGenerator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar CollectionHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof CollectionHashCodeGenerator#\n   */\n  generate: function generate(context) {\n    var elements = this.getElements(context)\n\n    return elements.reduce(function(hash, element) {\n      return ((31 * hash) + context.hashCode(element)) | 0\n    }, 1)\n  },\n\n  /**\n   * Returns the elements contained within the value of the specified <code>context</code>.\n   *\n   * @param {HashCodeContext} context - the {@link HashCodeContext} containing the value whose children elements are to\n   * be returned\n   * @return {Array} The elements contained within the value of <code>context</code>.\n   * @protected\n   * @abstract\n   * @memberof CollectionHashCodeGenerator#\n   */\n  getElements: /* istanbul ignore next */ function getElements(context) {}\n\n})\n\nmodule.exports = CollectionHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar CollectionHashCodeGenerator = require('./collection-generator')\n\n/**\n * An implementation of {@link CollectionHashCodeGenerator} that supports array values.\n *\n * @protected\n * @constructor\n * @extends CollectionHashCodeGenerator\n */\nvar ArrayHashCodeGenerator = CollectionHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ArrayHashCodeGenerator#\n   */\n  getElements: function getElements(context) {\n    return context.value\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ArrayHashCodeGenerator#\n   */\n  supports: function support(context) {\n    return context.string === '[object Array]'\n  }\n\n})\n\nmodule.exports = ArrayHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An implementation of {@link HashCodeGenerator} that supports boolean values.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar BooleanHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof BooleanHashCodeGenerator#\n   */\n  generate: function generate(context) {\n    return context.value ? 1231 : 1237\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof BooleanHashCodeGenerator#\n   */\n  supports: function supports(context) {\n    return context.type === 'boolean'\n  }\n\n})\n\nmodule.exports = BooleanHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An abstract implementation of {@link HashCodeGenerator} that is intended for implementations that wish to cache\n * generated hash codes to avoid re-generating them for the same values. Obviously, this should only ever be done for\n * immutable values.\n *\n * Generated hash codes should only ever be cached when the <code>allowCache</code> option is enabled, however, the\n * cache will <i>always</i> be checked before attempting to generate a hash code for a value.\n *\n * Implementations <b>must</b> implement the {@link CachingHashCodeGenerator#generateInternal} and\n * {@link HashCodeGenerator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar CachingHashCodeGenerator = HashCodeGenerator.extend(function() {\n  /**\n   * A cache of values mapped to their previously generated hash codes.\n   *\n   * @private\n   * @type {Object.<*, number>}\n   * @memberof CachingHashCodeGenerator#\n   */\n  this._cache = {}\n}, {\n\n  /**\n   * Clears the cache of hash codes that have been previously generated by this {@link CachingHashCodeGenerator} while\n   * the <code>allowCache</code> option has been enabled.\n   *\n   * @return {void}\n   * @public\n   * @memberof CachingHashCodeGenerator#\n   */\n  clearCache: function clearCache() {\n    this._cache = {}\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof CachingHashCodeGenerator#\n   */\n  generate: function generate(context) {\n    var hash = this._cache[context.value]\n\n    if (hash == null) {\n      hash = this.generateInternal(context)\n\n      if (context.options.allowCache) {\n        this._cache[context.value] = hash\n      }\n    }\n\n    return hash\n  },\n\n  /**\n   * Returns a hash code for the specified <code>context</code>.\n   *\n   * This method is called internally by {@link CachingHashCodeGenerator#generate} only when a hash code needs to be\n   * generated (i.e. the cache doesn't contain a previously generated hash code for the value of <code>context</code>).\n   *\n   * @param {HashCodeContext} context - the {@link HashCodeContext} for which the hash code is to be generated\n   * @return {number} The hash code generated for <code>context</code>.\n   * @protected\n   * @abstract\n   * @memberof CachingHashCodeGenerator#\n   */\n  generateInternal: /* istanbul ignore next */ function generateInternal(context) {}\n\n})\n\nmodule.exports = CachingHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An abstract implementation of {@link HashCodeGenerator} that is intended for implementations that wish to support\n * value types that represent a hash of key/value pairs. This is achieved by requesting the entries of key/value pairs\n * contained within the value as an multi-dimensional array from the implementation and then generates hash codes for\n * each entry to compute the hash code for the value.\n *\n * Implementations <b>must</b> implement the {@link HashHashCodeGenerator#getEntries} and\n * {@link HashCodeGenerator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar HashHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof HashHashCodeGenerator#\n   */\n  generate: function generate(context) {\n    var entries = this.getEntries(context)\n\n    return entries.reduce(function(hash, entry) {\n      return hash + (context.hashCode(entry[0]) ^ context.hashCode(entry[1]))\n    }, 0)\n  },\n\n  /**\n   * Returns the entries contained within the value of the specified <code>context</code>.\n   *\n   * This method returns a multi-dimensional array where each entry is an array consisting of the key and value, in that\n   * order.\n   *\n   * @param {HashCodeContext} context - the {@link HashCodeContext} containing the value whose entries are to be\n   * returned\n   * @return {Array.<Array>} The entries contained within the value of <code>context</code>.\n   * @protected\n   * @abstract\n   * @memberof HashHashCodeGenerator#\n   */\n  getEntries: /* istanbul ignore next */ function getEntries(context) {}\n\n})\n\nmodule.exports = HashHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An implementation of {@link HashCodeGenerator} that supports number values.\n *\n * It's important to note that, due to the oddity that is <code>NaN</code>, <code>NaN</code> shares the same hash code\n * as zero; <code>0</code>. This is because hash codes should never be different for the same value and, unfortunately,\n * <code>NaN</code> is never equal to itself. While the current solution may cause conflicts, it has been considered the\n * less of two evils. Best way to avoid conflicts is to sanity check application code to avoid the use of\n * <code>NaN</code> values, especially in hash tables.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar NumberHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof NumberHashCodeGenerator#\n   */\n  generate: function generate(context) {\n    return context.value !== context.value ? 0 : context.value\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof NumberHashCodeGenerator#\n   */\n  supports: function supports(context) {\n    return context.type === 'number'\n  }\n\n})\n\nmodule.exports = NumberHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashHashCodeGenerator = require('./hash-generator')\n\n/**\n * An implementation of {@link HashHashCodeGenerator} that supports plain old object values.\n *\n * @protected\n * @constructor\n * @extends HashHashCodeGenerator\n */\nvar ObjectHashCodeGenerator = HashHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ObjectHashCodeGenerator#\n   */\n  getEntries: function getEntries(context) {\n    var entries = []\n    var hash = context.value\n    var options = context.options\n    var value\n\n    for (var name in hash) {\n      if (!options.skipInherited || Object.prototype.hasOwnProperty.call(hash, name)) {\n        value = hash[name]\n\n        if ((typeof value !== 'function' || !options.skipMethods) && options.filterProperty(name, value, hash)) {\n          entries.push([ name, value ])\n        }\n      }\n    }\n\n    return entries\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ObjectHashCodeGenerator#\n   */\n  supports: function supports(context) {\n    return context.type === 'object'\n  }\n\n})\n\nmodule.exports = ObjectHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar CachingHashCodeGenerator = require('./caching-generator')\n\n/**\n * An implementation of {@link CachingHashCodeGenerator} that supports string values.\n *\n * @protected\n * @constructor\n * @extends CachingHashCodeGenerator\n */\nvar StringHashCodeGenerator = CachingHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof StringHashCodeGenerator#\n   */\n  generateInternal: function generateInternal(context) {\n    var hash = 0\n    var length = context.value.length\n\n    for (var i = 0; i < length; i++) {\n      hash = ((31 * hash) + context.value.charCodeAt(i)) | 0\n    }\n\n    return hash\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof StringHashCodeGenerator#\n   */\n  supports: function supports(context) {\n    return context.type === 'string'\n  }\n\n})\n\nmodule.exports = StringHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar StringHashCodeGenerator = require('./string-generator')\n\n/**\n * An extension of {@link StringHashCodeGenerator} that supports miscellaneous values by generating hash codes for their\n * string representations (generated by calling <code>toString</code> on the value).\n *\n * This {@link HashCodeGenerator} currently only supports functions and regular expressions.\n *\n * @protected\n * @constructor\n * @extends StringHashCodeGenerator\n */\nvar ToStringHashCodeGenerator = StringHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ToStringHashCodeGenerator#\n   */\n  generate: function generate(context) {\n    return ToStringHashCodeGenerator.super_.prototype.generate.call(this, context.copy(context.value.toString()))\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ToStringHashCodeGenerator#\n   */\n  supports: function supports(context) {\n    return context.type === 'function' || context.string === '[object RegExp]'\n  }\n\n})\n\nmodule.exports = ToStringHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An implementation of {@link HashCodeGenerator} that supports miscellaneous values by generating hash codes based on\n * their primitive value (determined by calling <code>valueOf</code> on the value).\n *\n * This {@link HashCodeGenerator} currently only supports dates.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar ValueOfHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ValueOfHashCodeGenerator#\n   */\n  generate: function generate(context) {\n    return context.hashCode(context.value.valueOf())\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ValueOfHashCodeGenerator#\n   */\n  supports: function supports(context) {\n    return context.string === '[object Date]'\n  }\n\n})\n\nmodule.exports = ValueOfHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar ArrayHashCodeGenerator = require('./array-generator')\nvar BooleanHashCodeGenerator = require('./boolean-generator')\nvar CachingHashCodeGenerator = require('./caching-generator')\nvar CollectionHashCodeGenerator = require('./collection-generator')\nvar HashCodeGenerator = require('./generator')\nvar HashHashCodeGenerator = require('./hash-generator')\nvar NumberHashCodeGenerator = require('./number-generator')\nvar ObjectHashCodeGenerator = require('./object-generator')\nvar StringHashCodeGenerator = require('./string-generator')\nvar ToStringHashCodeGenerator = require('./to-string-generator')\nvar ValueOfHashCodeGenerator = require('./value-of-generator')\n\n/**\n * A hash containing constructors for all hash code generators.\n *\n * @public\n * @type {Object.<string, Function>}\n */\nmodule.exports = {\n  ArrayHashCodeGenerator: ArrayHashCodeGenerator,\n  BooleanHashCodeGenerator: BooleanHashCodeGenerator,\n  CachingHashCodeGenerator: CachingHashCodeGenerator,\n  CollectionHashCodeGenerator: CollectionHashCodeGenerator,\n  HashCodeGenerator: HashCodeGenerator,\n  HashHashCodeGenerator: HashHashCodeGenerator,\n  NumberHashCodeGenerator: NumberHashCodeGenerator,\n  ObjectHashCodeGenerator: ObjectHashCodeGenerator,\n  StringHashCodeGenerator: StringHashCodeGenerator,\n  ToStringHashCodeGenerator: ToStringHashCodeGenerator,\n  ValueOfHashCodeGenerator: ValueOfHashCodeGenerator\n}\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\n/**\n * Contains the value for which a hash code is to be generated as well string representation and type of the value which\n * can be checked elsewhere for type-checking etc.\n *\n * @param {*} value - the value whose hash code is to be generated\n * @param {Function} hashCode - a reference to {@link Nevis.hashCode} which can be called within a\n * {@link HashCodeGenerator}\n * @param {?Nevis~HashCodeOptions} options - the options to be used (may be <code>null</code>)\n * @protected\n * @constructor\n */\nfunction HashCodeContext(value, hashCode, options) {\n  if (options == null) {\n    options = {}\n  }\n\n  /**\n   * A reference to {@link Nevis.hashCode} which can be called within a {@link HashCodeGenerator}.\n   *\n   * @private\n   * @type {Function}\n   */\n  this._hashCode = hashCode\n\n  /**\n   * The options to be used to generate the hash code for the value.\n   *\n   * @public\n   * @type {Nevis~HashCodeOptions}\n   */\n  this.options = {\n    allowCache: options.allowCache !== false,\n    filterProperty: options.filterProperty != null ? options.filterProperty : function() {\n      return true\n    },\n    skipInherited: Boolean(options.skipInherited),\n    skipMethods: Boolean(options.skipMethods),\n    useHashCodeMethod: options.useHashCodeMethod !== false\n  }\n\n  /**\n   * The string representation of the value whose hash code is to be generated.\n   *\n   * This is generated using <code>Object.prototype.toString</code> and is intended to be primarily used for more\n   * specific type-checking.\n   *\n   * @public\n   * @type {string}\n   */\n  this.string = Object.prototype.toString.call(value)\n\n  /**\n   * The type of the value whose hash code is to be generated.\n   *\n   * This is generated using <code>typeof</code> and is intended to be primarily used for simple type-checking.\n   *\n   * @public\n   * @type {string}\n   */\n  this.type = typeof value\n\n  /**\n   * The value whose hash code is to be generated.\n   *\n   * @public\n   * @type {*}\n   */\n  this.value = value\n}\n\n/**\n * Creates a copy of this {@link HashCodeContext} but for the specified <code>value</code> instead.\n *\n * This method can be useful for when a {@link HashCodeGenerator} implementation wants to generate the hash code based\n * on a value derived from the original value (e.g. a string representation) and then passing it to a super class.\n *\n * @param {*} value - the value whose hash code is to be generated\n * @return {HashCodeContext} A copy of this {@link HashCodeContext} for <code>value</code>.\n * @public\n * @memberof HashCodeContext#\n */\nHashCodeContext.prototype.copy = function copy(value) {\n  return new HashCodeContext(value, this._hashCode, this.options)\n}\n\n/**\n * A convenient shorthand for calling {@link Nevis.hashCode} from within a {@link HashCodeGenerator}.\n *\n * @param {*} value - the value whose hash code is to be returned (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @return {number} A hash code for <code>value</code>.\n * @public\n * @memberof HashCodeContext#\n */\nHashCodeContext.prototype.hashCode = function hashCode(value) {\n  return this._hashCode(value, this.options)\n}\n\nmodule.exports = HashCodeContext\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar generators = require('./generators')\nvar HashCodeContext = require('./context')\n\n/**\n * The list of active generators that will be checked for any that support the value before falling back to\n * {@link defaultGenerator}.\n *\n * @private\n * @type {HashCodeGenerator[]}\n */\nvar activeGenerators = [\n  new generators.BooleanHashCodeGenerator(),\n  new generators.NumberHashCodeGenerator(),\n  new generators.StringHashCodeGenerator(),\n  new generators.ToStringHashCodeGenerator(),\n  new generators.ValueOfHashCodeGenerator(),\n  new generators.ArrayHashCodeGenerator()\n]\n\n/**\n * The default generator to be used when no others support the value.\n *\n * @private\n * @type {HashCodeGenerator}\n */\nvar defaultGenerator = new generators.ObjectHashCodeGenerator()\n\n/**\n * Returns a hash code for the specified <code>value</code> using the <code>options</code> provided. This method is\n * supported for the benefit of hash tables.\n *\n * The general contract of <code>hashCode</code> is:\n *\n * <ul>\n *   <li>Whenever it is invoked on the same value more than once during an execution of an application, the\n *   <code>hashCode</code> method must consistently return the same number, provided no information used to generate the\n *   hash code on the value is modified. This number need not remain consistent from one execution of an application to\n *   another execution of the same application.</li>\n *   <li>If two values are equal, that calling the <code>hashCode</code> method on each of the two values must produce\n *   the same number result.</li>\n *   <li>It is <i>not</i> required that if two values are unequal, that calling the <code>hashCode</code> method on each\n *   of the two values must produce distinct number results. However, the programmer should be aware that producing\n *   distinct number results for unequal values may improve the performance of hash tables.</li>\n * </ul>\n *\n * If <code>value</code> is <code>null</code>, this method will always return zero. Otherwise, it will check whether\n * <code>value</code> has a method named \"hashCode\" and, if so, return the result of calling that method. If no\n * \"hashCode\" method exists on <code>value</code> or if the <code>useHashCodeMethod</code> option is disabled, it will\n * attempt to generate the hash code internally based on its type.\n *\n * Plain objects are hashed recursively for their properties and collections (e.g. arrays) are also hashed recursively\n * for their elements.\n *\n * @param {*} value - the value whose hash code is to be returned (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @param {Nevis~HashCodeOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {number} A hash code for <code>value</code>.\n * @public\n */\nfunction hashCode(value, options) {\n  if (value == null) {\n    return 0\n  }\n\n  var context = new HashCodeContext(value, hashCode, options)\n\n  if (context.options.useHashCodeMethod && typeof value.hashCode === 'function') {\n    return value.hashCode()\n  }\n\n  var generator\n  var length = activeGenerators.length\n\n  for (var i = 0; i < length; i++) {\n    generator = activeGenerators[i]\n\n    if (generator.supports(context)) {\n      return generator.generate(context)\n    }\n  }\n\n  return defaultGenerator.generate(context)\n}\n\n/**\n * Clears all previously generated hash codes that may been cached by any active {@link CachingHashCodeGenerator}\n * implementations.\n *\n * Such implementations only cache hash codes generated while the <code>allowCache</code> option is enabled and it is\n * unlikely that an application would be required to call this method, however, it is here if needed and also for\n * testing purposes.\n *\n * @return {void}\n * @public\n * @static\n * @memberof hashCode\n */\nhashCode.clearCache = function clearCache() {\n  activeGenerators.forEach(function(generator) {\n    if (typeof generator.clearCache === 'function') {\n      generator.clearCache()\n    }\n  })\n}\n\nmodule.exports = hashCode\n\n/**\n * Called with the name and value of a property belonging to an object for which a hash code is being generated to\n * determine whether the hash code for the property should be included in that generated for the object.\n *\n * @callback Nevis~HashCodeFilterPropertyCallback\n * @param {string} name - the name of the property being checked\n * @param {*} value - the value of the property being checked\n * @param {Object} obj - the object to which the property belongs and whose hash code is being generated\n * @return {boolean} <code>true</code> if the hash code for <code>obj</code> should consist of that generated for the\n * given property; otherwise <code>false</code>.\n */\n\n/**\n * The options to be used to generate the hash code.\n *\n * @typedef {Object} Nevis~HashCodeOptions\n * @property {boolean} [allowCache=true] - <code>true</code> to allow generators to cache generated hash codes for\n * faster re-generation; otherwise <code>false</code>. Only applies to implementations of\n * {@link CachingHashCodeGenerator}.\n * @property {Nevis~HashCodeFilterPropertyCallback} [filterProperty] - A function to be called to filter properties\n * based on their name and value when generating hash codes for objects to determine whether they should be included.\n * This is not called for method properties when <code>skipMethods</code> is enabled.\n * @property {boolean} [skipInherited] - <code>true</code> to skip inherited properties when generating hash codes for\n * objects; otherwise <code>false</code>.\n * @property {boolean} [skipMethods] - <code>true</code> to skip method properties when generating hash codes for\n * objects; otherwise <code>false</code>.\n * @property {boolean} [useHashCodeMethod=true] - <code>true</code> to return the result of calling the \"hashCode\"\n * method on value, when present; otherwise <code>false</code>.\n */\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar staticHashCode = require('./')\n\n/**\n * Assists in building hash codes for complex classes.\n *\n * Ideally the <code>initial</code> value and <code>multiplier</code> should be different for each class, however, this\n * is not vital. Prime numbers are preferred, especially for <code>multiplier</code>.\n *\n * @param {number} [initial=HashCodeBuilder.DEFAULT_INITIAL_VALUE] - the initial value to be used (may be\n * <code>null</code> but cannot be even)\n * @param {number} [multiplier=HashCodeBuilder.DEFAULT_MULTIPLIER_VALUE] - the multiplier to be used (may be\n * <code>null</code> but cannot be even)\n * @throws {Error} If either <code>initial</code> or <code>multiplier</code> are even numbers.\n * @public\n * @constructor\n */\nfunction HashCodeBuilder(initial, multiplier) {\n  if (initial == null) {\n    initial = HashCodeBuilder.DEFAULT_INITIAL_VALUE\n  } else if (initial % 2 === 0) {\n    throw new Error('initial must be an odd number')\n  }\n\n  if (multiplier == null) {\n    multiplier = HashCodeBuilder.DEFAULT_MULTIPLIER_VALUE\n  } else if (multiplier % 2 === 0) {\n    throw new Error('multiplier must be an odd number')\n  }\n\n  /**\n   * The current hash code for this {@link HashCodeBuilder}.\n   *\n   * @private\n   * @type {number}\n   */\n  this._hash = initial\n\n  /**\n   * The multiplier to be used by this {@link HashCodeBuilder}.\n   *\n   * @private\n   * @type {number}\n   */\n  this._multiplier = multiplier\n}\n\n/**\n * The default initial value to use in hash code building.\n *\n * @public\n * @static\n * @type {number}\n * @memberof HashCodeBuilder\n */\nHashCodeBuilder.DEFAULT_INITIAL_VALUE = 17\n\n/**\n * The default multiplier value to use in hash code building.\n *\n * @public\n * @static\n * @type {number}\n * @memberof HashCodeBuilder\n */\nHashCodeBuilder.DEFAULT_MULTIPLIER_VALUE = 37\n\n/**\n * Appends the specified <code>value</code> to this {@link HashCodeBuilder}, generating the hash code for it using the\n * <code>options</code> provided.\n *\n * @param {*} value - the value whose hash code is to be appended (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @param {Nevis~HashCodeOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {HashCodeBuilder} A reference to this {@link HashCodeBuilder} for chaining purposes.\n * @public\n * @memberof HashCodeBuilder#\n */\nHashCodeBuilder.prototype.append = function append(value, options) {\n  this._hash = (this._hash * this._multiplier) + staticHashCode(value, options)\n\n  return this\n}\n\n/**\n * Appends the result of computing the hash code for a super class to this {@link HashCodeBuilder}.\n *\n * @param {number} superHashCode - the result of computing the hash code for a super class\n * @return {HashCodeBuilder} A reference to this {@link HashCodeBuilder} for chaining purposes.\n * @public\n * @memberof HashCodeBuilder#\n */\nHashCodeBuilder.prototype.appendSuper = function appendSuper(superHashCode) {\n  this._hash = (this._hash * this._multiplier) + superHashCode\n\n  return this\n}\n\n/**\n * Returns the computed hash code.\n *\n * @return {number} The hash code based on the appended values.\n * @public\n * @memberof HashCodeBuilder#\n */\nHashCodeBuilder.prototype.build = function build() {\n  return this._hash\n}\n\n/**\n * Returns the hash code for this {@link HashCodeBuilder}.\n *\n * This method will return the computed hash code based on the appended values.\n *\n * @return {number} The hash code.\n * @public\n * @memberof HashCodeBuilder#\n */\nHashCodeBuilder.prototype.hashCode = function hashCode() {\n  return this._hash\n}\n\nmodule.exports = HashCodeBuilder\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar extend = require('./extend')\n\n/**\n * The base class from which all others should extend.\n *\n * @public\n * @constructor\n */\nfunction Nevis() {}\nNevis.class_ = 'Nevis'\nNevis.super_ = Object\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special\n * <code>class_</code> property on the child constructor, otherwise \"Nevis\" will be used instead. The class name may\n * also be used string representation for instances of the child constructor (via <code>toString</code>), but this is\n * not applicable to the <i>lite</i> version of Nevis.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {string} [name=\"Nevis\"] - the class name to be used for the child constructor\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n * @static\n * @memberof Nevis\n */\nNevis.extend = extend\n\nmodule.exports = Nevis\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\n/**\n * Returns the result of calling the <code>toString</code> method on the specified <code>value</code> when it is\n * non-null.\n *\n * If <code>value</code> is <code>null</code> or <code>undefined</code>, this method will return <code>\"null\"</code> or\n * <code>\"undefined\"</code> respectively.\n *\n * @param {*} value - the value whose string representation is to be returned (may be <code>null</code>)\n * @return {string} The string representation of <code>value</code>.\n * @public\n */\nfunction toString(value) {\n  if (typeof value === 'undefined') {\n    return 'undefined'\n  }\n  if (value == null) {\n    return 'null'\n  }\n\n  return value.toString()\n}\n\nmodule.exports = toString\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar EqualsBuilder = require('./equals/builder')\nvar HashCodeBuilder = require('./hash-code/builder')\nvar Nevis = require('./nevis')\nvar staticEquals = require('./equals')\nvar staticHashCode = require('./hash-code')\nvar staticToString = require('./to-string')\n\n/**\n * Returns whether the specified <code>value</code> is \"equal to\" the <code>other</code> provided using the given\n * <code>options</code>.\n *\n * Consequently, if both arguments are <code>null</code>, <code>true</code> is returned and if exactly one argument is\n * <code>null</code>, <code>false</code> is returned. Otherwise, this method implements an equivalence relation on\n * non-null object references:\n *\n * <ul>\n *   <li>It is <i>reflexive</i>: for any non-null reference value <code>x</code>, <code>equals(x, x)</code> should\n *   return <code>true</code>.</li>\n *   <li>It is <i>symmetric</i>: for any non-null reference values <code>x</code> and <code>y</code>,\n *   <code>equals(x, y)</code> should return <code>true</code> if and only if <code>equals(y, x)</code> returns\n *   <code>true</code>.</li>\n *   <li>It is <i>transitive</i>: for any non-null reference values <code>x</code>, <code>y</code>, and <code>z</code>,\n *   if <code>equals(x, y)</code> returns <code>true</code> and <code>equals(y, z)</code> returns <code>true</code>,\n *   then <code>equals(x, z)</code> should return <code>true</code>.</li>\n *   <li>It is <i>consistent</i>: for any non-null reference values <code>x</code> and <code>y</code>, multiple\n *   invocations of <code>equals(x, y)</code> consistently return <code>true</code> or consistently return\n *   <code>false</code>, provided no information used in <code>equals</code> comparisons on the objects is\n *   modified.</li>\n *   <li>For any non-null reference value <code>x</code>, <code>equals(x, null)</code> should return\n *   <code>false</code>.</li>\n * </ul>\n *\n * If neither value is <code>null</code> and both are not exactly (strictly) equal, this method will first check whether\n * <code>value</code> has a method named \"equals\" and, if so, return the result of calling that method with\n * <code>other</code> passed to it. If no \"equals\" method exists on <code>value</code> or if the\n * <code>useEqualsMethod</code> option is disabled, it will attempt to test the equality internally based on their type.\n *\n * Plain objects are tested recursively for their properties and collections (e.g. arrays) are also tested recursively\n * for their elements.\n *\n * @param {*} value - the value to be checked against <code>other</code> (may be <code>null</code>)\n * @param {Function} [value.equals] - the method to be used to test equality for <code>value</code> and\n * <code>other</code>, when present\n * @param {*} other - the other value to be checked against <code>value</code> (may be <code>null</code>)\n * @param {Nevis~EqualsOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {boolean} <code>true</code> if <code>value</code> is equal to <code>other</code>; otherwise\n * <code>false</code>.\n * @public\n * @static\n * @memberof Nevis\n */\nNevis.equals = staticEquals\n\n/**\n * Assists in building good equals for complex classes.\n *\n * @public\n * @static\n * @constructor\n * @memberof Nevis\n */\nNevis.EqualsBuilder = EqualsBuilder\n\n/**\n * Returns a hash code for the specified <code>value</code> using the <code>options</code> provided. This method is\n * supported for the benefit of hash tables.\n *\n * The general contract of <code>hashCode</code> is:\n *\n * <ul>\n *   <li>Whenever it is invoked on the same value more than once during an execution of an application, the\n *   <code>hashCode</code> method must consistently return the same number, provided no information used to generate the\n *   hash code on the value is modified. This number need not remain consistent from one execution of an application to\n *   another execution of the same application.</li>\n *   <li>If two values are equal, that calling the <code>hashCode</code> method on each of the two values must produce\n *   the same number result.</li>\n *   <li>It is <i>not</i> required that if two values are unequal, that calling the <code>hashCode</code> method on each\n *   of the two values must produce distinct number results. However, the programmer should be aware that producing\n *   distinct number results for unequal values may improve the performance of hash tables.</li>\n * </ul>\n *\n * If <code>value</code> is <code>null</code>, this method will always return zero. Otherwise, it will check whether\n * <code>value</code> has a method named \"hashCode\" and, if so, return the result of calling that method. If no\n * \"hashCode\" method exists on <code>value</code> or if the <code>useHashCodeMethod</code> option is disabled, it will\n * attempt to generate the hash code internally based on its type.\n *\n * Plain objects are hashed recursively for their properties and collections (e.g. arrays) are also hashed recursively\n * for their elements.\n *\n * @param {*} value - the value whose hash code is to be returned (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @param {Nevis~HashCodeOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {number} A hash code for <code>value</code>.\n * @public\n * @static\n * @memberof Nevis\n */\nNevis.hashCode = staticHashCode\n\n/**\n * Assists in building hash codes for complex classes.\n *\n * Ideally the <code>initial</code> value and <code>multiplier</code> should be different for each class, however, this\n * is not vital. Prime numbers are preferred, especially for <code>multiplier</code>.\n *\n * @param {number} [initial=HashCodeBuilder.DEFAULT_INITIAL_VALUE] - the initial value to be used (may be\n * <code>null</code> but cannot be even)\n * @param {number} [multiplier=HashCodeBuilder.DEFAULT_MULTIPLIER_VALUE] - the multiplier to be used (may be\n * <code>null</code> but cannot be even)\n * @throws {Error} If either <code>initial</code> or <code>multiplier</code> are even numbers.\n * @public\n * @static\n * @constructor\n * @memberof Nevis\n */\nNevis.HashCodeBuilder = HashCodeBuilder\n\n/**\n * Returns the result of calling the <code>toString</code> method on the specified <code>value</code> when it is\n * non-null.\n *\n * If <code>value</code> is <code>null</code> or <code>undefined</code>, this method will return <code>\"null\"</code> or\n * <code>\"undefined\"</code> respectively.\n *\n * @param {*} value - the value whose string representation is to be returned (may be <code>null</code>)\n * @return {string} The string representation of <code>value</code>.\n * @public\n * @static\n * @memberof Nevis\n */\nNevis.toString = staticToString\n\n/**\n * Returns whether this instance is \"equal to\" the specified <code>obj</code>.\n *\n * This method implements an equivalence relation on non-null object references:\n *\n * <ul>\n *   <li>It is <i>reflexive</i>: for any non-null reference value <code>x</code>, <code>x.equals(x)</code> should return\n *   <code>true</code>.</li>\n *   <li>It is <i>symmetric</i>: for any non-null reference values <code>x</code> and <code>y</code>,\n *   <code>x.equals(y)</code> should return <code>true</code> if and only if <code>y.equals(x)</code> returns\n *   <code>true</code>.</li>\n *   <li>It is <i>transitive</i>: for any non-null reference values <code>x</code>, <code>y</code>, and <code>z</code>,\n *   if <code>x.equals(y)</code> returns <code>true</code> and <code>y.equals(z)</code> returns <code>true</code>, then\n *   <code>x.equals(z)</code> should return <code>true</code>.</li>\n *   <li>It is <i>consistent</i>: for any non-null reference values <code>x</code> and <code>y</code>, multiple\n *   invocations of <code>x.equals(y)</code> consistently return <code>true</code> or consistently return\n *   <code>false</code>, provided no information used in <code>equals</code> comparisons on the objects is\n *   modified.</li>\n *   <li>For any non-null reference value <code>x</code>, <code>x.equals(null)</code> should return\n *   <code>false</code>.</li>\n * </ul>\n *\n * The default implementation of this method is the most discriminating possible equivalence relation on objects; that\n * is, for any non-null reference values <code>x</code> and <code>y</code>, this method returns <code>true</code> if,\n * and only if, <code>x</code> and <code>y</code> are exactly equal (<code>x === y</code> has the value\n * <code>true</code>).\n *\n * Please note that it is generally necessary to override the {@link Nevis#hashCode} method whenever this method is\n * overridden, so as to maintain the general contract for the {@link Nevis#hashCode} method, which states that equal\n * objects must have equal hash codes.\n *\n * @param {*} obj - the reference to which this instance is to be compared (may be <code>null</code>)\n * @return {boolean} <code>true</code> if this instance is equal to <code>obj</code>; otherwise <code>false</code>.\n * @public\n * @memberof Nevis#\n */\nNevis.prototype.equals = function equals(obj) {\n  return this === obj\n}\n\n/**\n * Returns the hash code for this instance. This method is supported for the benefit of hash tables.\n *\n * The general contract of <code>hashCode</code> is:\n *\n * <ul>\n *   <li>Whenever it is invoked on the same instance more than once during an execution of an application, the\n *   <code>hashCode</code> method must consistently return the same number, provided no information used to generate the\n *   hash code on the instance is modified. This number need not remain consistent from one execution of an application\n *   to another execution of the same application.</li>\n *   <li>If two instances are equal, that calling the <code>hashCode</code> method on each of the two instances must\n *   produce the same number result.</li>\n *   <li>It is <i>not</i> required that if two instances are unequal, that calling the <code>hashCode</code> method on\n *   each of the two instances must produce distinct number results. However, the programmer should be aware that\n *   producing distinct number results for unequal instances may improve the performance of hash tables.</li>\n * </ul>\n *\n * The default implementation of this method will attempt to generate the hash code based on all of the fields on this\n * instance.\n *\n * Please note that it is generally necessary to override the {@link Nevis#equals} method whenever this method is\n * overridden, so as to maintain the above contract where equal objects must have equal hash codes.\n *\n * @return {number} The hash code.\n * @public\n * @memberof Nevis#\n */\nNevis.prototype.hashCode = function hashCode() {\n  return staticHashCode(this, { useHashCodeMethod: false })\n}\n\n/**\n * Returns a string representation of this instance.\n *\n * In general, the {@code Nevis#toString} method returns a string that \"textually represents\" this instance. The result\n * should be a concise but informative representation that is easy for a person to read.\n *\n * The default implementation of this method will return a string consisting of this instance's class name, the at-sign\n * character (<code>@</code>), and the hexadecimal representation of the hash code of this instance.\n *\n * @return {string} A string representation of this instance.\n * @public\n * @memberof Nevis#\n */\nNevis.prototype.toString = function toString() {\n  return this.constructor.class_ + '@' + this.hashCode().toString(16)\n}\n\nmodule.exports = Nevis\n"],"names":["extend","EqualsComparator","CollectionEqualsComparator","HashEqualsComparator","ArrayEqualsComparator","NumberEqualsComparator","ObjectEqualsComparator","StringEqualsComparator","ToStringEqualsComparator","ValueOfEqualsComparator","comparators","context","EqualsContext","staticEquals","HashCodeGenerator","CollectionHashCodeGenerator","HashHashCodeGenerator","CachingHashCodeGenerator","StringHashCodeGenerator","ArrayHashCodeGenerator","BooleanHashCodeGenerator","NumberHashCodeGenerator","ObjectHashCodeGenerator","ToStringHashCodeGenerator","ValueOfHashCodeGenerator","generators","HashCodeContext","staticHashCode","Nevis","EqualsBuilder","HashCodeBuilder","staticToString"],"mappings":"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"}