{"version":3,"file":null,"sources":["../src/oopsy.js"],"sourcesContent":["/*\n * Copyright (C) 2016 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * A bare-bones constructor for surrogate prototype swapping.\n *\n * @private\n * @constructor\n */\nvar Constructor = function() {}\n/**\n * A reference to <code>Object.prototype.hasOwnProperty</code>.\n *\n * @private\n * @type {Function}\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n/**\n * A reference to <code>Array.prototype.slice</code>.\n *\n * @private\n * @type {Function}\n */\nvar slice = Array.prototype.slice\n\n/**\n * Extends the specified <code>target</code> object with the properties in each of the <code>sources</code> provided.\n *\n * Nothing happens if <code>target</code> is <code>null</code> and if any source is <code>null</code> it will be\n * ignored.\n *\n * @param {boolean} own - <code>true</code> to only copy <b>own</b> properties from <code>sources</code> onto\n * <code>target</code>; otherwise <code>false</code>\n * @param {Object} [target] - the target object which should be extended\n * @param {...Object} [sources] - the source objects whose properties are to be copied onto <code>target</code>\n * @return {void}\n * @private\n */\nfunction extend(own, target, sources) {\n  if (target == null) {\n    return\n  }\n\n  sources = slice.call(arguments, 2)\n\n  var property\n  var source\n\n  for (var i = 0, length = sources.length; i < length; i++) {\n    source = sources[i]\n\n    for (property in source) {\n      if (!own || hasOwnProperty.call(source, property)) {\n        target[property] = source[property]\n      }\n    }\n  }\n}\n\n/**\n * Creates an object which inherits the given <code>prototype</code>.\n *\n * Optionally, the created object can be extended further with the specified <code>properties</code>.\n *\n * @param {Object} prototype - the prototype to be inherited by the created object\n * @param {Object} [properties] - the optional properties to be extended by the created object\n * @return {Object} The newly created object.\n * @private\n */\nfunction create(prototype, properties) {\n  var result\n  if (typeof Object.create === 'function') {\n    result = Object.create(prototype)\n  } else {\n    Constructor.prototype = prototype\n    result = new Constructor()\n    Constructor.prototype = null\n  }\n\n  if (properties) {\n    extend(true, result, properties)\n  }\n\n  return result\n}\n\n/**\n * The base constructor from which all others should extend.\n *\n * @public\n * @constructor\n */\nexport default function Oopsy() {}\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n * @static\n */\nOopsy.extend = function(constructor, prototype, statics) {\n  var superConstructor = this\n\n  if (typeof constructor !== 'function') {\n    statics = prototype\n    prototype = constructor\n    constructor = function() {\n      return superConstructor.apply(this, arguments)\n    }\n  }\n\n  extend(false, constructor, superConstructor, statics)\n\n  constructor.prototype = create(superConstructor.prototype, prototype)\n  constructor.prototype.constructor = constructor\n\n  constructor.super_ = superConstructor\n\n  return constructor\n}\n"],"names":["extend","own","target","sources","slice","call","arguments","property","source","i","length","hasOwnProperty","create","prototype","properties","result","Object","Constructor","Oopsy","Array","constructor","statics","superConstructor","this","apply","super_"],"mappings":";wLAyDA,SAASA,GAAOC,EAAKC,EAAQC,GAC3B,GAAc,MAAVD,EAAJ,CAIAC,EAAUC,EAAMC,KAAKC,UAAW,EAKhC,KAAK,GAHDC,GACAC,EAEKC,EAAI,EAAGC,EAASP,EAAQO,OAAQD,EAAIC,EAAQD,IAAK,CACxDD,EAASL,EAAQM,EAEjB,KAAKF,IAAYC,GACVP,IAAOU,EAAeN,KAAKG,EAAQD,KACtCL,EAAOK,GAAYC,EAAOD,MAgBlC,QAASK,GAAOC,EAAWC,GACzB,GAAIC,EAaJ,OAZ6B,kBAAlBC,QAAOJ,OAChBG,EAASC,OAAOJ,OAAOC,IAEvBI,EAAYJ,UAAYA,EACxBE,EAAS,GAAIE,GACbA,EAAYJ,UAAY,MAGtBC,GACFd,GAAO,EAAMe,EAAQD,GAGhBC,EASM,QAASG,SAnFpBD,GAAc,aAOdN,EAAiBK,OAAOH,UAAUF,eAOlCP,EAAQe,MAAMN,UAAUT,YAuF5Bc,GAAMlB,OAAS,SAASoB,EAAaP,EAAWQ,GAC9C,GAAIC,GAAmBC,IAiBvB,OAf2B,kBAAhBH,KACTC,EAAUR,EACVA,EAAYO,EACZA,EAAc,WACZ,MAAOE,GAAiBE,MAAMD,KAAMjB,aAIxCN,GAAO,EAAOoB,EAAaE,EAAkBD,GAE7CD,EAAYP,UAAYD,EAAOU,EAAiBT,UAAWA,GAC3DO,EAAYP,UAAUO,YAAcA,EAEpCA,EAAYK,OAASH,EAEdF"}