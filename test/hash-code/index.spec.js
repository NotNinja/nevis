/*
 * Copyright (C) 2017 Alasdair Mercer, !ninja
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict';

var expect = require('chai').expect;
var sinon = require('sinon');

var hashCode = require('../../src/hash-code/index');

describe('hash-code/index:hashCode', function() {
  it('should be a function', function() {
    expect(hashCode).to.be.a('function');
  });

  context('when a generator supports value', function() {
    it('should return hash code generated by generator', function() {
      expect(hashCode('foo')).to.equal(101574);
    });
  });

  context('when no generator supports value', function() {
    it('should return hash code generated by default generator', function() {
      expect(hashCode({ foo: 'bar' })).to.equal(61653);
    });
  });

  context('when value is null', function() {
    it('should return zero', function() {
      expect(hashCode(null)).to.equal(0);
    });
  });

  context('when value is undefined', function() {
    it('should return zero', function() {
      expect(hashCode()).to.equal(0);
    });
  });

  context('when value has "hashCode" method', function() {
    it('should return result of calling "hashCode" method', function() {
      var expected = 123;
      var value = {
        foo: 'bar',
        hashCode: function() {
          return expected;
        }
      };

      sinon.spy(value, 'hashCode');

      expect(hashCode(value)).to.equal(expected);
      expect(value.hashCode.calledOnce).to.be.true;
    });

    context('and "ignoreHashCode" option is enabled', function() {
      it('should ignore "hashCode" method', function() {
        var value = {
          foo: 'bar',
          hashCode: function() {
            return 123;
          }
        };

        sinon.spy(value, 'hashCode');

        expect(hashCode(value, { ignoreHashCode: true })).to.equal(61653);
        expect(value.hashCode.notCalled).to.be.true;
      });
    });
  });

  describe('.clearCache', function() {
    it('should call clearCache on all CachingHashCodeGenerator instances', function() {
      hashCode.clearCache();

      // Not throwing error has to suffice for this test as activeGenerators is private preventing other assertions
    });
  });
});
