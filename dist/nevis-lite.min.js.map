{"version":3,"file":"nevis-lite.min.js","sources":["../src/extend.js","../src/hash-code/generators/generator.js","../src/hash-code/context.js","../src/hash-code/index.js","../src/hash-code/builder.js","../src/nevis.js","../src/hash-code/generators/collection-generator.js","../src/hash-code/generators/array-generator.js","../src/hash-code/generators/boolean-generator.js","../src/hash-code/generators/caching-generator.js","../src/hash-code/generators/hash-generator.js","../src/hash-code/generators/number-generator.js","../src/hash-code/generators/object-generator.js","../src/hash-code/generators/string-generator.js","../src/hash-code/generators/to-string-generator.js","../src/hash-code/generators/value-of-generator.js","../src/hash-code/generators/index.js","../src/index.js"],"sourcesContent":["/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\n/**\n * A bare-bones constructor for surrogate prototype swapping.\n *\n * @private\n * @constructor\n */\nvar Constructor = /* istanbul ignore next */ function() {}\n/**\n * A reference to <code>Object.prototype.hasOwnProperty</code>.\n *\n * @private\n * @type {Function}\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n/**\n * A reference to <code>Array.prototype.slice</code>.\n *\n * @private\n * @type {Function}\n */\nvar slice = Array.prototype.slice\n\n/**\n * Creates an object which inherits the given <code>prototype</code>.\n *\n * Optionally, the created object can be extended further with the specified <code>properties</code>.\n *\n * @param {Object} prototype - the prototype to be inherited by the created object\n * @param {Object} [properties] - the optional properties to be extended by the created object\n * @return {Object} The newly created object.\n * @private\n */\nfunction createObject(prototype, properties) {\n  var result\n  /* istanbul ignore else */\n  if (typeof Object.create === 'function') {\n    result = Object.create(prototype)\n  } else {\n    Constructor.prototype = prototype\n    result = new Constructor()\n    Constructor.prototype = null\n  }\n\n  if (properties) {\n    extendObject(true, result, properties)\n  }\n\n  return result\n}\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n */\nfunction extend(constructor, prototype, statics) {\n  var superConstructor = this\n\n  if (typeof constructor !== 'function') {\n    statics = prototype\n    prototype = constructor\n    constructor = function() {\n      return superConstructor.apply(this, arguments)\n    }\n  }\n\n  extendObject(false, constructor, superConstructor, statics)\n\n  constructor.prototype = createObject(superConstructor.prototype, prototype)\n  constructor.prototype.constructor = constructor\n\n  constructor.super_ = superConstructor\n\n  return constructor\n}\n\n/**\n * Extends the specified <code>target</code> object with the properties in each of the <code>sources</code> provided.\n *\n * if any source is <code>null</code> it will be ignored.\n *\n * @param {boolean} own - <code>true</code> to only copy <b>own</b> properties from <code>sources</code> onto\n * <code>target</code>; otherwise <code>false</code>\n * @param {Object} target - the target object which should be extended\n * @param {...Object} [sources] - the source objects whose properties are to be copied onto <code>target</code>\n * @return {void}\n * @private\n */\nfunction extendObject(own, target, sources) {\n  sources = slice.call(arguments, 2)\n\n  var property\n  var source\n\n  for (var i = 0, length = sources.length; i < length; i++) {\n    source = sources[i]\n\n    for (property in source) {\n      if (!own || hasOwnProperty.call(source, property)) {\n        target[property] = source[property]\n      }\n    }\n  }\n}\n\nmodule.exports = extend\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar extend = require('../../extend')\n\n/**\n * Responsible for generating a hash code for a specific {@link HashCodeContext}.\n *\n * Individual <code>HashCodeGenerator</code> implementations should attempt to concentrate on specific value types to\n * keep them small and targeted, allowing other implementations to possibly generate a more suitable hash code. The\n * {@link HashCodeContext} should <b>never</b> be modified but can be copied via {@link HashCodeContext#copy}.\n *\n * Implementations <b>must</b> implement the {@link HashCodeGenerator#generate} and {@link HashCodeGenerator#supports}\n * methods.\n *\n * @protected\n * @constructor\n */\nfunction HashCodeGenerator() {}\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n * @static\n * @memberof HashCodeGenerator\n */\nHashCodeGenerator.extend = extend\n\n/**\n * Returns a hash code for the specified <code>context</code>.\n *\n * This method is only called when {@link HashCodeGenerator#supports} indicates that this {@link HashCodeGenerator}\n * supports <code>context</code>.\n *\n * @param {HashCodeContext} context - the {@link HashCodeContext} for which the hash code is to be generated\n * @return {number} The hash code generated for <code>context</code>.\n * @public\n * @abstract\n * @memberof HashCodeGenerator.prototype\n */\nHashCodeGenerator.prototype.generate = /* istanbul ignore next */ function generate(context) {}\n\n/**\n * Returns whether this {@link HashCodeGenerator} supports the specified <code>context</code>.\n *\n * This method should only return <code>true</code> when {@link HashCodeGenerator#generate} can generate a hash code for\n * <code>context</code>.\n *\n * @param {HashCodeContext} context - the {@link HashCodeContext} to be checked\n * @return {boolean} <code>true</code> if this {@link HashCodeGenerator} can generate a hash code for\n * <code>context</code>; otherwise <code>false</code>.\n * @public\n * @abstract\n * @memberof HashCodeGenerator.prototype\n */\nHashCodeGenerator.prototype.supports = /* istanbul ignore next */ function supports(context) {}\n\nmodule.exports = HashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\n/**\n * Contains the value for which a hash code is to be generated as well string representation and type of the value which\n * can be checked elsewhere for type-checking etc.\n *\n * @param {*} value - the value whose hash code is to be generated\n * @param {Function} hashCode - a reference to {@link Nevis.hashCode} which can be called within a\n * {@link HashCodeGenerator}\n * @param {?Nevis~HashCodeOptions} options - the options to be used (may be <code>null</code>)\n * @protected\n * @constructor\n */\nfunction HashCodeContext(value, hashCode, options) {\n  if (options == null) {\n    options = {}\n  }\n\n  /**\n   * A reference to {@link Nevis.hashCode} which can be called within a {@link HashCodeGenerator}.\n   *\n   * @private\n   * @type {Function}\n   */\n  this._hashCode = hashCode\n\n  /**\n   * The options to be used to generate the hash code for the value.\n   *\n   * @public\n   * @type {Nevis~HashCodeOptions}\n   */\n  this.options = {\n    allowCache: options.allowCache !== false,\n    filterProperty: options.filterProperty != null ? options.filterProperty : function() {\n      return true\n    },\n    skipInherited: Boolean(options.skipInherited),\n    skipMethods: options.skipMethods !== false,\n    useHashCodeMethod: options.useHashCodeMethod !== false\n  }\n\n  /**\n   * The string representation of the value whose hash code is to be generated.\n   *\n   * This is generated using <code>Object.prototype.toString</code> and is intended to be primarily used for more\n   * specific type-checking.\n   *\n   * @public\n   * @type {string}\n   */\n  this.string = Object.prototype.toString.call(value)\n\n  /**\n   * The type of the value whose hash code is to be generated.\n   *\n   * This is generated using <code>typeof</code> and is intended to be primarily used for simple type-checking.\n   *\n   * @public\n   * @type {string}\n   */\n  this.type = typeof value\n\n  /**\n   * The value whose hash code is to be generated.\n   *\n   * @public\n   * @type {*}\n   */\n  this.value = value\n}\n\n/**\n * Creates a copy of this {@link HashCodeContext} but for the specified <code>value</code> instead.\n *\n * This method can be useful for when a {@link HashCodeGenerator} implementation wants to generate the hash code based\n * on a value derived from the original value (e.g. a string representation) and then passing it to a super class.\n *\n * @param {*} value - the value whose hash code is to be generated\n * @return {HashCodeContext} A copy of this {@link HashCodeContext} for <code>value</code>.\n * @public\n * @memberof HashCodeContext.prototype\n */\nHashCodeContext.prototype.copy = function copy(value) {\n  return new HashCodeContext(value, this._hashCode, this.options)\n}\n\n/**\n * A convenient shorthand for calling {@link Nevis.hashCode} from within a {@link HashCodeGenerator}.\n *\n * @param {*} value - the value whose hash code is to be returned (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @return {number} A hash code for <code>value</code>.\n * @public\n * @memberof HashCodeContext.prototype\n */\nHashCodeContext.prototype.hashCode = function hashCode(value) {\n  return this._hashCode(value, this.options)\n}\n\nmodule.exports = HashCodeContext\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar generators = require('./generators')\nvar HashCodeContext = require('./context')\n\n/**\n * The list of active generators that will be checked for any that support the value before falling back to\n * {@link defaultGenerator}.\n *\n * @private\n * @type {HashCodeGenerator[]}\n */\nvar activeGenerators = [\n  new generators.BooleanHashCodeGenerator(),\n  new generators.NumberHashCodeGenerator(),\n  new generators.StringHashCodeGenerator(),\n  new generators.ToStringHashCodeGenerator(),\n  new generators.ValueOfHashCodeGenerator(),\n  new generators.ArrayHashCodeGenerator()\n]\n\n/**\n * The default generator to be used when no others support the value.\n *\n * @private\n * @type {HashCodeGenerator}\n */\nvar defaultGenerator = new generators.ObjectHashCodeGenerator()\n\n/**\n * Returns a hash code for the specified <code>value</code> using the <code>options</code> provided. This method is\n * supported for the benefit of hash tables.\n *\n * The general contract of <code>hashCode</code> is:\n *\n * <ul>\n *   <li>Whenever it is invoked on the same value more than once during an execution of an application, the\n *   <code>hashCode</code> method must consistently return the same number, provided no information used to generate the\n *   hash code on the value is modified. This number need not remain consistent from one execution of an application to\n *   another execution of the same application.</li>\n *   <li>If two values are equal, that calling the <code>hashCode</code> method on each of the two values must produce\n *   the same number result.</li>\n *   <li>It is <i>not</i> required that if two values are unequal, that calling the <code>hashCode</code> method on each\n *   of the two values must produce distinct number results. However, the programmer should be aware that producing\n *   distinct number results for unequal values may improve the performance of hash tables.</li>\n * </ul>\n *\n * If <code>value</code> is <code>null</code>, this method will always return zero. Otherwise, it will check whether\n * <code>value</code> has a method named \"hashCode\" and, if so, return the result of calling that method. If no\n * \"hashCode\" method exists on <code>value</code> or if the <code>useHashCodeMethod</code> option is disabled, it will\n * attempt to find a {@link HashCodeGenerator} that supports <code>value</code>. Finally, if no generator could be found\n * that supports <code>value</code>, it will fall back to the default generator (i.e. {@link ObjectHashCodeGenerator})\n * which should support most other objects.\n *\n * Plain objects are hashed recursively for their properties and collections (e.g. arrays) are also hashed recursively\n * for their elements.\n *\n * @param {*} value - the value whose hash code is to be returned (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @param {Nevis~HashCodeOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {number} A hash code for <code>value</code>.\n * @public\n */\nfunction hashCode(value, options) {\n  if (value == null) {\n    return 0\n  }\n\n  var context = new HashCodeContext(value, hashCode, options)\n\n  if (context.options.useHashCodeMethod && typeof value.hashCode === 'function') {\n    return value.hashCode()\n  }\n\n  var generator\n  var length = activeGenerators.length\n\n  for (var i = 0; i < length; i++) {\n    generator = activeGenerators[i]\n\n    if (generator.supports(context)) {\n      return generator.generate(context)\n    }\n  }\n\n  return defaultGenerator.generate(context)\n}\n\n/**\n * Clears all previously generated hash codes that may been cached by any active {@link CachingHashCodeGenerator}\n * implementations.\n *\n * Such implementations only cache hash codes generated while the <code>allowCache</code> option is enabled and it is\n * unlikely that an application would be required to call this method, however, it is here if needed and also for\n * testing purposes.\n *\n * @return {void}\n * @public\n * @static\n * @memberof hashCode\n */\nhashCode.clearCache = function clearCache() {\n  activeGenerators.forEach(function(generator) {\n    if (typeof generator.clearCache === 'function') {\n      generator.clearCache()\n    }\n  })\n}\n\nmodule.exports = hashCode\n\n/**\n * Called with the name and value of a property belonging to an object for which a hash code is being generated to\n * determine whether the hash code for the property should be included in that generated for the object.\n *\n * @callback Nevis~HashCodeFilterPropertyCallback\n * @param {string} name - the name of the property being checked\n * @param {*} value - the value of the property being checked\n * @param {Object} obj - the object to which the property belongs and whose hash code is being generated\n * @return {boolean} <code>true</code> if the hash code for <code>obj</code> should consist of that generated for the\n * given property; otherwise <code>false</code>.\n */\n\n/**\n * The options to be used to generate the hash code.\n *\n * @typedef {Object} Nevis~HashCodeOptions\n * @property {boolean} [allowCache=true] - <code>true</code> to allow generators to cache generated hash codes for\n * faster re-generation; otherwise <code>false</code>. Only applies to implementations of\n * {@link CachingHashCodeGenerator}.\n * @property {Nevis~HashCodeFilterPropertyCallback} [filterProperty] - A function to be called to filter properties\n * based on their name and value when generating hash codes for objects to determine whether they should be included.\n * This is not called for method properties when <code>skipMethods</code> is enabled.\n * @property {boolean} [skipInherited] - <code>true</code> to skip inherited properties when generating hash codes for\n * objects; otherwise <code>false</code>.\n * @property {boolean} [skipMethods=true] - <code>true</code> to skip method properties when generating hash codes for\n * objects; otherwise <code>false</code>.\n * @property {boolean} [useHashCodeMethod=true] - <code>true</code> to call \"hashCode\" method on value, when present;\n * otherwise <code>false</code>.\n */\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar hash = require('./')\n\n/**\n * Assists in building hash codes for complex classes.\n *\n * Ideally the <code>initial</code> value and <code>multiplier</code> should be different for each class, however, this\n * is not vital. Prime numbers are preferred, especially for <code>multiplier</code>.\n *\n * @param {number} [initial=HashCodeBuilder.DEFAULT_INITIAL_VALUE] - the initial value to be used (may be\n * <code>null</code> but cannot be even)\n * @param {number} [multiplier=HashCodeBuilder.DEFAULT_MULTIPLIER_VALUE] - the multiplier to be used (may be\n * <code>null</code> but cannot be even)\n * @throws {Error} If either <code>initial</code> or <code>multiplier</code> are even numbers.\n * @public\n * @constructor\n */\nfunction HashCodeBuilder(initial, multiplier) {\n  if (initial == null) {\n    initial = HashCodeBuilder.DEFAULT_INITIAL_VALUE\n  } else if (initial % 2 === 0) {\n    throw new Error('initial must be an odd number')\n  }\n\n  if (multiplier == null) {\n    multiplier = HashCodeBuilder.DEFAULT_MULTIPLIER_VALUE\n  } else if (multiplier % 2 === 0) {\n    throw new Error('multiplier must be an odd number')\n  }\n\n  /**\n   * The current hash code for this {@link HashCodeBuilder}.\n   *\n   * @private\n   * @type {number}\n   */\n  this._hash = initial\n\n  /**\n   * The multiplier to be used by this {@link HashCodeBuilder}.\n   *\n   * @private\n   * @type {number}\n   */\n  this._multiplier = multiplier\n}\n\n/**\n * The default initial value to use in hash code building.\n *\n * @public\n * @static\n * @type {number}\n * @memberof HashCodeBuilder\n */\nHashCodeBuilder.DEFAULT_INITIAL_VALUE = 17\n\n/**\n * The default multiplier value to use in hash code building.\n *\n * @public\n * @static\n * @type {number}\n * @memberof HashCodeBuilder\n */\nHashCodeBuilder.DEFAULT_MULTIPLIER_VALUE = 37\n\n/**\n * Appends the specified <code>value</code> to this {@link HashCodeBuilder}, generating the hash code for it using the\n * <code>options</code> provided.\n *\n * @param {*} value - the value whose hash code is to be appended (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @param {Nevis~HashCodeOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {HashCodeBuilder} A reference to this {@link HashCodeBuilder} for chaining purposes.\n * @public\n * @memberof HashCodeBuilder.prototype\n */\nHashCodeBuilder.prototype.append = function append(value, options) {\n  this._hash = (this._hash * this._multiplier) + hash(value, options)\n\n  return this\n}\n\n/**\n * Appends the result of computing the hash code for a super class to this {@link HashCodeBuilder}.\n *\n * @param {number} superHashCode - the result of computing the hash code for a super class\n * @return {HashCodeBuilder} A reference to this {@link HashCodeBuilder} for chaining purposes.\n * @public\n * @memberof HashCodeBuilder.prototype\n */\nHashCodeBuilder.prototype.appendSuper = function appendSuper(superHashCode) {\n  this._hash = (this._hash * this._multiplier) + superHashCode\n\n  return this\n}\n\n/**\n * Returns the computed hash code.\n *\n * @return {number} The hash code based on the appended values.\n * @public\n * @memberof HashCodeBuilder.prototype\n */\nHashCodeBuilder.prototype.build = function build() {\n  return this._hash\n}\n\n/**\n * Returns the hash code for this {@link HashCodeBuilder}.\n *\n * This method will return the computed hash code based on the appended values.\n *\n * @return {number} The hash code.\n * @public\n * @memberof HashCodeBuilder.prototype\n */\nHashCodeBuilder.prototype.hashCode = function hashCode() {\n  return this._hash\n}\n\nmodule.exports = HashCodeBuilder\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar extend = require('./extend')\n\n/**\n * The base class from which all others should extend.\n *\n * @public\n * @constructor\n */\nfunction Nevis() {}\nNevis.super_ = Object\n\n/**\n * Extends the constructor to which this method is associated with the <code>prototype</code> and/or\n * <code>statics</code> provided.\n *\n * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple\n * constructor which only calls the super constructor will be used instead.\n *\n * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.\n *\n * @param {Function} [constructor] - the constructor for the child\n * @param {Object} [prototype] - the prototype properties to be defined for the child\n * @param {Object} [statics] - the static properties to be defined for the child\n * @return {Function} The child <code>constructor</code> provided or the one created if none was given.\n * @public\n * @static\n * @memberof Nevis\n */\nNevis.extend = extend\n\nmodule.exports = Nevis\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An abstract implementation of {@link HashCodeGenerator} that is intended for implementations that wish to support\n * value types that contain a collection of other values. This is achieved by requesting the elements contained within\n * the value as an array from the implementation and then generates hash codes for each element to compute the hash code\n * for the value.\n *\n * Implementations <b>must</b> implement the {@link CollectionHashCodeGenerator#getElements} and\n * {@link HashCodeGenerator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar CollectionHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof CollectionHashCodeGenerator.prototype\n   */\n  generate: function generate(context) {\n    var elements = this.getElements(context)\n\n    return elements.reduce(function(hash, element) {\n      return ((31 * hash) + context.hashCode(element)) | 0\n    }, 1)\n  },\n\n  /**\n   * Returns the elements contained within the value of the specified <code>context</code>.\n   *\n   * @param {HashCodeContext} context - the {@link HashCodeContext} containing the value whose children elements are to\n   * be returned\n   * @return {Array} The elements contained within the value of <code>context</code>.\n   * @protected\n   * @abstract\n   * @memberof CollectionHashCodeGenerator.prototype\n   */\n  getElements: /* istanbul ignore next */ function getElements(context) {}\n\n})\n\nmodule.exports = CollectionHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar CollectionHashCodeGenerator = require('./collection-generator')\n\n/**\n * An implementation of {@link CollectionHashCodeGenerator} that supports array values.\n *\n * @protected\n * @constructor\n * @extends CollectionHashCodeGenerator\n */\nvar ArrayHashCodeGenerator = CollectionHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ArrayHashCodeGenerator.prototype\n   */\n  getElements: function getElements(context) {\n    return context.value\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ArrayHashCodeGenerator.prototype\n   */\n  supports: function support(context) {\n    return context.string === '[object Array]'\n  }\n\n})\n\nmodule.exports = ArrayHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An implementation of {@link HashCodeGenerator} that supports boolean values.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar BooleanHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof BooleanHashCodeGenerator.prototype\n   */\n  generate: function generate(context) {\n    return context.value ? 1231 : 1237\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof BooleanHashCodeGenerator.prototype\n   */\n  supports: function supports(context) {\n    return context.type === 'boolean'\n  }\n\n})\n\nmodule.exports = BooleanHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An abstract implementation of {@link HashCodeGenerator} that is intended for implementations that wish to cache\n * generated hash codes to avoid re-generating them for the same values. Obviously, this should only ever be done for\n * immutable values.\n *\n * Generated hash codes should only ever be cached when the <code>allowCache</code> option is enabled, however, the\n * cache will <i>always</i> be checked before attempting to generate a hash code for a value.\n *\n * Implementations <b>must</b> implement the {@link CachingHashCodeGenerator#generateInternal} and\n * {@link HashCodeGenerator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar CachingHashCodeGenerator = HashCodeGenerator.extend(function() {\n  /**\n   * A cache of values mapped to their previously generated hash codes.\n   *\n   * @private\n   * @type {Object.<*, number>}\n   * @memberof CachingHashCodeGenerator.prototype\n   */\n  this._cache = {}\n}, {\n\n  /**\n   * Clears the cache of hash codes that have been previously generated by this {@link CachingHashCodeGenerator} while\n   * the <code>allowCache</code> option has been enabled.\n   *\n   * @return {void}\n   * @public\n   * @memberof CachingHashCodeGenerator.prototype\n   */\n  clearCache: function clearCache() {\n    this._cache = {}\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof CachingHashCodeGenerator.prototype\n   */\n  generate: function generate(context) {\n    var hash = this._cache[context.value]\n\n    if (hash == null) {\n      hash = this.generateInternal(context)\n\n      if (context.options.allowCache) {\n        this._cache[context.value] = hash\n      }\n    }\n\n    return hash\n  },\n\n  /**\n   * Returns a hash code for the specified <code>context</code>.\n   *\n   * This method is called internally by {@link CachingHashCodeGenerator#generate} only when a hash code needs to be\n   * generated (i.e. the cache doesn't contain a previously generated hash code for the value of <code>context</code>).\n   *\n   * @param {HashCodeContext} context - the {@link HashCodeContext} for which the hash code is to be generated\n   * @return {number} The hash code generated for <code>context</code>.\n   * @protected\n   * @abstract\n   * @memberof CachingHashCodeGenerator.prototype\n   */\n  generateInternal: /* istanbul ignore next */ function generateInternal(context) {}\n\n})\n\nmodule.exports = CachingHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An abstract implementation of {@link HashCodeGenerator} that is intended for implementations that wish to support\n * value types that represent a hash of key/value pairs. This is achieved by requesting the entries of key/value pairs\n * contained within the value as an multi-dimensional array from the implementation and then generates hash codes for\n * each entry to compute the hash code for the value.\n *\n * Implementations <b>must</b> implement the {@link HashHashCodeGenerator#getEntries} and\n * {@link HashCodeGenerator#supports} methods.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar HashHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof HashHashCodeGenerator.prototype\n   */\n  generate: function generate(context) {\n    var entries = this.getEntries(context)\n\n    return entries.reduce(function(hash, entry) {\n      return hash + (context.hashCode(entry[0]) ^ context.hashCode(entry[1]))\n    }, 0)\n  },\n\n  /**\n   * Returns the entries contained within the value of the specified <code>context</code>.\n   *\n   * This method returns a multi-dimensional array where each entry is an array consisting of the key and value, in that\n   * order.\n   *\n   * @param {HashCodeContext} context - the {@link HashCodeContext} containing the value whose entries are to be\n   * returned\n   * @return {Array.<Array>} The entries contained within the value of <code>context</code>.\n   * @protected\n   * @abstract\n   * @memberof HashHashCodeGenerator.prototype\n   */\n  getEntries: /* istanbul ignore next */ function getEntries(context) {}\n\n})\n\nmodule.exports = HashHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An implementation of {@link HashCodeGenerator} that supports number values.\n *\n * It's important to note that, due to the oddity that is <code>NaN</code>, <code>NaN</code> shares the same hash code\n * as zero; <code>0</code>. This is because hash codes should never be different for the same value and, unfortunately,\n * <code>NaN</code> is never equal to itself. While the current solution may cause conflicts, it has been considered the\n * less of two evils. Best way to avoid conflicts is to sanity check application code to avoid the use of\n * <code>NaN</code> values, especially in hash tables.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar NumberHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof NumberHashCodeGenerator.prototype\n   */\n  generate: function generate(context) {\n    return context.value !== context.value ? 0 : context.value\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof NumberHashCodeGenerator.prototype\n   */\n  supports: function supports(context) {\n    return context.type === 'number'\n  }\n\n})\n\nmodule.exports = NumberHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashHashCodeGenerator = require('./hash-generator')\n\n/**\n * An implementation of {@link HashHashCodeGenerator} that supports plain old object values.\n *\n * @protected\n * @constructor\n * @extends HashHashCodeGenerator\n */\nvar ObjectHashCodeGenerator = HashHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ObjectHashCodeGenerator.prototype\n   */\n  getEntries: function getEntries(context) {\n    var entries = []\n    var propertyValue\n\n    for (var name in context.value) {\n      if (!context.options.skipInherited || Object.prototype.hasOwnProperty.call(context.value, name)) {\n        propertyValue = context.value[name]\n\n        if ((typeof propertyValue !== 'function' || !context.options.skipMethods) &&\n          context.options.filterProperty(name, propertyValue, context.value)) {\n          entries.push([ name, propertyValue ])\n        }\n      }\n    }\n\n    return entries\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ObjectHashCodeGenerator.prototype\n   */\n  supports: function supports(context) {\n    return context.type === 'object'\n  }\n\n})\n\nmodule.exports = ObjectHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar CachingHashCodeGenerator = require('./caching-generator')\n\n/**\n * An implementation of {@link CachingHashCodeGenerator} that supports string values.\n *\n * @protected\n * @constructor\n * @extends CachingHashCodeGenerator\n */\nvar StringHashCodeGenerator = CachingHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof StringHashCodeGenerator.prototype\n   */\n  generateInternal: function generateInternal(context) {\n    var hash = 0\n    var length = context.value.length\n\n    for (var i = 0; i < length; i++) {\n      hash = ((31 * hash) + context.value.charCodeAt(i)) | 0\n    }\n\n    return hash\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof StringHashCodeGenerator.prototype\n   */\n  supports: function supports(context) {\n    return context.type === 'string'\n  }\n\n})\n\nmodule.exports = StringHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar StringHashCodeGenerator = require('./string-generator')\n\n/**\n * An extension of {@link StringHashCodeGenerator} that supports miscellaneous values by generating hash codes for their\n * string representations (generated by calling <code>toString</code> on the value).\n *\n * This {@link HashCodeGenerator} currently only supports functions and regular expressions.\n *\n * @protected\n * @constructor\n * @extends StringHashCodeGenerator\n */\nvar ToStringHashCodeGenerator = StringHashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ToStringHashCodeGenerator.prototype\n   */\n  generate: function generate(context) {\n    return ToStringHashCodeGenerator.super_.prototype.generate.call(this, context.copy(context.value.toString()))\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ToStringHashCodeGenerator.prototype\n   */\n  supports: function supports(context) {\n    return context.type === 'function' || context.string === '[object RegExp]'\n  }\n\n})\n\nmodule.exports = ToStringHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar HashCodeGenerator = require('./generator')\n\n/**\n * An implementation of {@link HashCodeGenerator} that supports miscellaneous values by generating hash codes based on\n * their primitive value (determined by calling <code>valueOf</code> on the value).\n *\n * This {@link HashCodeGenerator} currently only supports dates.\n *\n * @protected\n * @constructor\n * @extends HashCodeGenerator\n */\nvar ValueOfHashCodeGenerator = HashCodeGenerator.extend({\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ValueOfHashCodeGenerator.prototype\n   */\n  generate: function generate(context) {\n    return context.hashCode(context.value.valueOf())\n  },\n\n  /**\n   * @inheritdoc\n   * @override\n   * @memberof ValueOfHashCodeGenerator.prototype\n   */\n  supports: function supports(context) {\n    return context.string === '[object Date]'\n  }\n\n})\n\nmodule.exports = ValueOfHashCodeGenerator\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar ArrayHashCodeGenerator = require('./array-generator')\nvar BooleanHashCodeGenerator = require('./boolean-generator')\nvar CachingHashCodeGenerator = require('./caching-generator')\nvar CollectionHashCodeGenerator = require('./collection-generator')\nvar HashCodeGenerator = require('./generator')\nvar HashHashCodeGenerator = require('./hash-generator')\nvar NumberHashCodeGenerator = require('./number-generator')\nvar ObjectHashCodeGenerator = require('./object-generator')\nvar StringHashCodeGenerator = require('./string-generator')\nvar ToStringHashCodeGenerator = require('./to-string-generator')\nvar ValueOfHashCodeGenerator = require('./value-of-generator')\n\n/**\n * A hash containing constructors for all built-in hash code generators.\n *\n * @public\n * @type {Object.<string, Function>}\n */\nmodule.exports = {\n  ArrayHashCodeGenerator: ArrayHashCodeGenerator,\n  BooleanHashCodeGenerator: BooleanHashCodeGenerator,\n  CachingHashCodeGenerator: CachingHashCodeGenerator,\n  CollectionHashCodeGenerator: CollectionHashCodeGenerator,\n  HashCodeGenerator: HashCodeGenerator,\n  HashHashCodeGenerator: HashHashCodeGenerator,\n  NumberHashCodeGenerator: NumberHashCodeGenerator,\n  ObjectHashCodeGenerator: ObjectHashCodeGenerator,\n  StringHashCodeGenerator: StringHashCodeGenerator,\n  ToStringHashCodeGenerator: ToStringHashCodeGenerator,\n  ValueOfHashCodeGenerator: ValueOfHashCodeGenerator\n}\n","/*\n * Copyright (C) 2017 Alasdair Mercer, Skelp\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict'\n\nvar hash = require('./hash-code')\nvar HashCodeBuilder = require('./hash-code/builder')\nvar Nevis = require('./nevis')\n\n/**\n * Returns a hash code for the specified <code>value</code> using the <code>options</code> provided. This method is\n * supported for the benefit of hash tables.\n *\n * The general contract of <code>hashCode</code> is:\n *\n * <ul>\n *   <li>Whenever it is invoked on the same value more than once during an execution of an application, the\n *   <code>hashCode</code> method must consistently return the same number, provided no information used to generate the\n *   hash code on the value is modified. This number need not remain consistent from one execution of an application to\n *   another execution of the same application.</li>\n *   <li>If two values are equal, that calling the <code>hashCode</code> method on each of the two values must produce\n *   the same number result.</li>\n *   <li>It is <i>not</i> required that if two values are unequal, that calling the <code>hashCode</code> method on each\n *   of the two values must produce distinct number results. However, the programmer should be aware that producing\n *   distinct number results for unequal values may improve the performance of hash tables.</li>\n * </ul>\n *\n * If <code>value</code> is <code>null</code>, this method will always return zero. Otherwise, it will check whether\n * <code>value</code> has a method named \"hashCode\" and, if so, return the result of calling that method. If no\n * \"hashCode\" method exists on <code>value</code> or if the <code>useHashCodeMethod</code> option is disabled, it will\n * attempt to find a {@link HashCodeGenerator} that supports <code>value</code>. Finally, if no generator could be found\n * that supports <code>value</code>, it will fall back to the default generator (i.e. {@link ObjectHashCodeGenerator})\n * which should support most other objects.\n *\n * Plain objects are hashed recursively for their properties and collections (e.g. arrays) are also hashed recursively\n * for their elements.\n *\n * @param {*} value - the value whose hash code is to be returned (may be <code>null</code>)\n * @param {Function} [value.hashCode] - the method used to produce the hash code for <code>value</code>, when present\n * @param {Nevis~HashCodeOptions} [options] - the options to be used (may be <code>null</code>)\n * @return {number} A hash code for <code>value</code>.\n * @public\n * @static\n * @memberof Nevis\n */\nNevis.hashCode = hash\n\n/**\n * Assists in building hash codes for complex classes.\n *\n * Ideally the <code>initial</code> value and <code>multiplier</code> should be different for each class, however, this\n * is not vital. Prime numbers are preferred, especially for <code>multiplier</code>.\n *\n * @param {number} [initial=HashCodeBuilder.DEFAULT_INITIAL_VALUE] - the initial value to be used (may be\n * <code>null</code> but cannot be even)\n * @param {number} [multiplier=HashCodeBuilder.DEFAULT_MULTIPLIER_VALUE] - the multiplier to be used (may be\n * <code>null</code> but cannot be even)\n * @throws {Error} If either <code>initial</code> or <code>multiplier</code> are even numbers.\n * @public\n * @static\n * @constructor\n * @memberof Nevis\n */\nNevis.HashCodeBuilder = HashCodeBuilder\n\n/**\n * Returns the hash code for this instance. This method is supported for the benefit of hash tables.\n *\n * The general contract of <code>hashCode</code> is:\n *\n * <ul>\n *   <li>Whenever it is invoked on the same instance more than once during an execution of an application, the\n *   <code>hashCode</code> method must consistently return the same number, provided no information used to generate the\n *   hash code on the instance is modified. This number need not remain consistent from one execution of an application\n *   to another execution of the same application.</li>\n *   <li>If two instances are equal, that calling the <code>hashCode</code> method on each of the two instances must\n *   produce the same number result.</li>\n *   <li>It is <i>not</i> required that if two instances are unequal, that calling the <code>hashCode</code> method on\n *   each of the two instances must produce distinct number results. However, the programmer should be aware that\n *   producing distinct number results for unequal instances may improve the performance of hash tables.</li>\n * </ul>\n *\n * This method will attempt to find a {@link HashCodeGenerator} that supports this instance. However, if no generator\n * could be found that supports this instance, it will fall back to the default generator (i.e.\n * {@link ObjectHashCodeGenerator}) which should support most other objects.\n *\n * @return {number} The hash code.\n * @public\n * @memberof Nevis.prototype\n */\nNevis.prototype.hashCode = function hashCode() {\n  return hash(this, {\n    skipMethods: false,\n    useHashCodeMethod: false\n  })\n}\n\nmodule.exports = Nevis\n"],"names":["createObject","prototype","properties","result","Object","create","Constructor","extendObject","extend","constructor","statics","superConstructor","this","apply","arguments","super_","own","target","sources","slice","call","property","source","i","length","hasOwnProperty","HashCodeGenerator","HashCodeContext","value","hashCode","options","_hashCode","allowCache","filterProperty","skipInherited","Boolean","skipMethods","useHashCodeMethod","string","toString","type","context","generator","activeGenerators","supports","generate","defaultGenerator","HashCodeBuilder","initial","multiplier","DEFAULT_INITIAL_VALUE","Error","DEFAULT_MULTIPLIER_VALUE","_hash","_multiplier","Nevis","Array","CollectionHashCodeGenerator","elements","getElements","reduce","hash","element","ArrayHashCodeGenerator","BooleanHashCodeGenerator","CachingHashCodeGenerator","_cache","clearCache","generateInternal","HashHashCodeGenerator","entries","getEntries","entry","NumberHashCodeGenerator","ObjectHashCodeGenerator","propertyValue","name","push","StringHashCodeGenerator","charCodeAt","ToStringHashCodeGenerator","copy","ValueOfHashCodeGenerator","valueOf","generators","forEach","append","appendSuper","superHashCode","build"],"mappings":"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"}