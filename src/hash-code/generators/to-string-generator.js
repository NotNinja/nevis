/*
 * Copyright (C) 2017 Alasdair Mercer, !ninja
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict';

var StringHashCodeGenerator = require('./string-generator');

/**
 * An extension of {@link StringHashCodeGenerator} that supports miscellaneous values by generating hash codes for their
 * string representations (generated by calling <code>toString</code> on the value).
 *
 * This {@link HashCodeGenerator} currently only supports functions, numbers and regular expressions.
 *
 * @protected
 * @constructor
 * @extends StringHashCodeGenerator
 */
var ToStringHashCodeGenerator = StringHashCodeGenerator.extend({

  /**
   * @inheritdoc
   * @override
   * @memberof ToStringHashCodeGenerator#
   */
  generate: function generate(context) {
    return ToStringHashCodeGenerator.super_.prototype.generate.call(this, context.copy(context.value.toString()));
  },

  /**
   * @inheritdoc
   * @override
   * @memberof ToStringHashCodeGenerator#
   */
  supports: function supports(context) {
    return context.type === 'function' || context.type === 'number' || context.string === '[object RegExp]';
  }

});

module.exports = ToStringHashCodeGenerator;
